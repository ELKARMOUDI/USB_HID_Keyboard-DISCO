
USB_HID_KEYBOARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000647c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006614  08006614  00007614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800666c  0800666c  0000818c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800666c  0800666c  0000766c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006674  08006674  0000818c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006674  08006674  00007674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006678  08006678  00007678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000000  0800667c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a00  2000018c  08006808  0000818c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b8c  08006808  00008b8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000818c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c74c  00000000  00000000  000081bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000277f  00000000  00000000  00014908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  00017088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000802  00000000  00000000  00017b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017886  00000000  00000000  0001836a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df44  00000000  00000000  0002fbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086e70  00000000  00000000  0003db34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c49a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b2c  00000000  00000000  000c49e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000c7514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000018c 	.word	0x2000018c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080065fc 	.word	0x080065fc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000190 	.word	0x20000190
 80001d4:	080065fc 	.word	0x080065fc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
uint8_t keys_buffer[8];



int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0


  HAL_Init();
 8000508:	f000 f98a 	bl	8000820 <HAL_Init>


  SystemClock_Config();
 800050c:	f000 f840 	bl	8000590 <SystemClock_Config>

  MX_GPIO_Init();
 8000510:	f000 f8a6 	bl	8000660 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000514:	f005 fc18 	bl	8005d48 <MX_USB_DEVICE_Init>

  keys_buffer[0] = 1; //report_id
 8000518:	4b1a      	ldr	r3, [pc, #104]	@ (8000584 <main+0x80>)
 800051a:	2201      	movs	r2, #1
 800051c:	701a      	strb	r2, [r3, #0]
  keys_buffer[1] = 0; //modifier
 800051e:	4b19      	ldr	r3, [pc, #100]	@ (8000584 <main+0x80>)
 8000520:	2200      	movs	r2, #0
 8000522:	705a      	strb	r2, [r3, #1]
  keys_buffer[2] = 0; //oem
 8000524:	4b17      	ldr	r3, [pc, #92]	@ (8000584 <main+0x80>)
 8000526:	2200      	movs	r2, #0
 8000528:	709a      	strb	r2, [r3, #2]
  keys_buffer[3] = 0; //keycode data
 800052a:	4b16      	ldr	r3, [pc, #88]	@ (8000584 <main+0x80>)
 800052c:	2200      	movs	r2, #0
 800052e:	70da      	strb	r2, [r3, #3]
  keys_buffer[4] = 0; //keycode data
 8000530:	4b14      	ldr	r3, [pc, #80]	@ (8000584 <main+0x80>)
 8000532:	2200      	movs	r2, #0
 8000534:	711a      	strb	r2, [r3, #4]
  keys_buffer[5] = 0; //keycode data
 8000536:	4b13      	ldr	r3, [pc, #76]	@ (8000584 <main+0x80>)
 8000538:	2200      	movs	r2, #0
 800053a:	715a      	strb	r2, [r3, #5]
  keys_buffer[6] = 0; //keycode data
 800053c:	4b11      	ldr	r3, [pc, #68]	@ (8000584 <main+0x80>)
 800053e:	2200      	movs	r2, #0
 8000540:	719a      	strb	r2, [r3, #6]
  keys_buffer[7] = 0; //keycode data
 8000542:	4b10      	ldr	r3, [pc, #64]	@ (8000584 <main+0x80>)
 8000544:	2200      	movs	r2, #0
 8000546:	71da      	strb	r2, [r3, #7]

  while (1)
  {
	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) == GPIO_PIN_SET){
 8000548:	2101      	movs	r1, #1
 800054a:	480f      	ldr	r0, [pc, #60]	@ (8000588 <main+0x84>)
 800054c:	f000 fc94 	bl	8000e78 <HAL_GPIO_ReadPin>
 8000550:	4603      	mov	r3, r0
 8000552:	2b01      	cmp	r3, #1
 8000554:	d1f8      	bne.n	8000548 <main+0x44>

	       keys_buffer[3] = 0x4E; //PgDwn press
 8000556:	4b0b      	ldr	r3, [pc, #44]	@ (8000584 <main+0x80>)
 8000558:	224e      	movs	r2, #78	@ 0x4e
 800055a:	70da      	strb	r2, [r3, #3]
	       USBD_HID_SendReport(&hUsbDeviceFS,keys_buffer,8);
 800055c:	2208      	movs	r2, #8
 800055e:	4909      	ldr	r1, [pc, #36]	@ (8000584 <main+0x80>)
 8000560:	480a      	ldr	r0, [pc, #40]	@ (800058c <main+0x88>)
 8000562:	f004 f84f 	bl	8004604 <USBD_HID_SendReport>
	       HAL_Delay(50);
 8000566:	2032      	movs	r0, #50	@ 0x32
 8000568:	f000 f9cc 	bl	8000904 <HAL_Delay>

	       keys_buffer[3] = 0; //PgDwn release
 800056c:	4b05      	ldr	r3, [pc, #20]	@ (8000584 <main+0x80>)
 800056e:	2200      	movs	r2, #0
 8000570:	70da      	strb	r2, [r3, #3]
	       USBD_HID_SendReport(&hUsbDeviceFS,keys_buffer,8);
 8000572:	2208      	movs	r2, #8
 8000574:	4903      	ldr	r1, [pc, #12]	@ (8000584 <main+0x80>)
 8000576:	4805      	ldr	r0, [pc, #20]	@ (800058c <main+0x88>)
 8000578:	f004 f844 	bl	8004604 <USBD_HID_SendReport>
	       HAL_Delay(50);
 800057c:	2032      	movs	r0, #50	@ 0x32
 800057e:	f000 f9c1 	bl	8000904 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) == GPIO_PIN_SET){
 8000582:	e7e1      	b.n	8000548 <main+0x44>
 8000584:	200001a8 	.word	0x200001a8
 8000588:	40020000 	.word	0x40020000
 800058c:	200001b8 	.word	0x200001b8

08000590 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	@ 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	@ 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f006 f800 	bl	80065a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b27      	ldr	r3, [pc, #156]	@ (8000658 <SystemClock_Config+0xc8>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005bc:	4a26      	ldr	r2, [pc, #152]	@ (8000658 <SystemClock_Config+0xc8>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c4:	4b24      	ldr	r3, [pc, #144]	@ (8000658 <SystemClock_Config+0xc8>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b21      	ldr	r3, [pc, #132]	@ (800065c <SystemClock_Config+0xcc>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a20      	ldr	r2, [pc, #128]	@ (800065c <SystemClock_Config+0xcc>)
 80005da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b1e      	ldr	r3, [pc, #120]	@ (800065c <SystemClock_Config+0xcc>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ec:	2301      	movs	r3, #1
 80005ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000600:	2304      	movs	r3, #4
 8000602:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000604:	2360      	movs	r3, #96	@ 0x60
 8000606:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000608:	2302      	movs	r3, #2
 800060a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800060c:	2304      	movs	r3, #4
 800060e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0320 	add.w	r3, r7, #32
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fe81 	bl	800231c <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000620:	f000 f85a 	bl	80006d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000628:	2302      	movs	r3, #2
 800062a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000630:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000634:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	2103      	movs	r1, #3
 8000640:	4618      	mov	r0, r3
 8000642:	f002 f8e3 	bl	800280c <HAL_RCC_ClockConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800064c:	f000 f844 	bl	80006d8 <Error_Handler>
  }
}
 8000650:	bf00      	nop
 8000652:	3750      	adds	r7, #80	@ 0x50
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b088      	sub	sp, #32
 8000664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	4b15      	ldr	r3, [pc, #84]	@ (80006d0 <MX_GPIO_Init+0x70>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	4a14      	ldr	r2, [pc, #80]	@ (80006d0 <MX_GPIO_Init+0x70>)
 8000680:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
 8000686:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <MX_GPIO_Init+0x70>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	4b0e      	ldr	r3, [pc, #56]	@ (80006d0 <MX_GPIO_Init+0x70>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	4a0d      	ldr	r2, [pc, #52]	@ (80006d0 <MX_GPIO_Init+0x70>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a2:	4b0b      	ldr	r3, [pc, #44]	@ (80006d0 <MX_GPIO_Init+0x70>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ae:	2301      	movs	r3, #1
 80006b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	4619      	mov	r1, r3
 80006c0:	4804      	ldr	r0, [pc, #16]	@ (80006d4 <MX_GPIO_Init+0x74>)
 80006c2:	f000 fa55 	bl	8000b70 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006c6:	bf00      	nop
 80006c8:	3720      	adds	r7, #32
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40020000 	.word	0x40020000

080006d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006dc:	b672      	cpsid	i
}
 80006de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <Error_Handler+0x8>

080006e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	4b10      	ldr	r3, [pc, #64]	@ (8000730 <HAL_MspInit+0x4c>)
 80006f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000730 <HAL_MspInit+0x4c>)
 80006f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80006fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000730 <HAL_MspInit+0x4c>)
 80006fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <HAL_MspInit+0x4c>)
 800070c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800070e:	4a08      	ldr	r2, [pc, #32]	@ (8000730 <HAL_MspInit+0x4c>)
 8000710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000714:	6413      	str	r3, [r2, #64]	@ 0x40
 8000716:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <HAL_MspInit+0x4c>)
 8000718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000722:	2007      	movs	r0, #7
 8000724:	f000 f9e2 	bl	8000aec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800

08000734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <NMI_Handler+0x4>

0800073c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <HardFault_Handler+0x4>

08000744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <MemManage_Handler+0x4>

0800074c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <BusFault_Handler+0x4>

08000754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000758:	bf00      	nop
 800075a:	e7fd      	b.n	8000758 <UsageFault_Handler+0x4>

0800075c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr

0800076a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800078a:	f000 f89b 	bl	80008c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000798:	4802      	ldr	r0, [pc, #8]	@ (80007a4 <OTG_FS_IRQHandler+0x10>)
 800079a:	f000 fcc9 	bl	8001130 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000694 	.word	0x20000694

080007a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <SystemInit+0x20>)
 80007ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007b2:	4a05      	ldr	r2, [pc, #20]	@ (80007c8 <SystemInit+0x20>)
 80007b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007cc:	480d      	ldr	r0, [pc, #52]	@ (8000804 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007d0:	f7ff ffea 	bl	80007a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d4:	480c      	ldr	r0, [pc, #48]	@ (8000808 <LoopForever+0x6>)
  ldr r1, =_edata
 80007d6:	490d      	ldr	r1, [pc, #52]	@ (800080c <LoopForever+0xa>)
  ldr r2, =_sidata
 80007d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000810 <LoopForever+0xe>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007dc:	e002      	b.n	80007e4 <LoopCopyDataInit>

080007de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007e2:	3304      	adds	r3, #4

080007e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e8:	d3f9      	bcc.n	80007de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000814 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000818 <LoopForever+0x16>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f0:	e001      	b.n	80007f6 <LoopFillZerobss>

080007f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f4:	3204      	adds	r2, #4

080007f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f8:	d3fb      	bcc.n	80007f2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80007fa:	f005 fedb 	bl	80065b4 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80007fe:	f7ff fe81 	bl	8000504 <main>

08000802 <LoopForever>:

LoopForever:
  b LoopForever
 8000802:	e7fe      	b.n	8000802 <LoopForever>
  ldr   r0, =_estack
 8000804:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800080c:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8000810:	0800667c 	.word	0x0800667c
  ldr r2, =_sbss
 8000814:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8000818:	20000b8c 	.word	0x20000b8c

0800081c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800081c:	e7fe      	b.n	800081c <ADC_IRQHandler>
	...

08000820 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000824:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <HAL_Init+0x40>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a0d      	ldr	r2, [pc, #52]	@ (8000860 <HAL_Init+0x40>)
 800082a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800082e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000830:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <HAL_Init+0x40>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a0a      	ldr	r2, [pc, #40]	@ (8000860 <HAL_Init+0x40>)
 8000836:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800083a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800083c:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <HAL_Init+0x40>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a07      	ldr	r2, [pc, #28]	@ (8000860 <HAL_Init+0x40>)
 8000842:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000846:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000848:	2003      	movs	r0, #3
 800084a:	f000 f94f 	bl	8000aec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800084e:	2000      	movs	r0, #0
 8000850:	f000 f808 	bl	8000864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000854:	f7ff ff46 	bl	80006e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023c00 	.word	0x40023c00

08000864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800086c:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <HAL_InitTick+0x54>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <HAL_InitTick+0x58>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4619      	mov	r1, r3
 8000876:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800087a:	fbb3 f3f1 	udiv	r3, r3, r1
 800087e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f000 f967 	bl	8000b56 <HAL_SYSTICK_Config>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
 8000890:	e00e      	b.n	80008b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2b0f      	cmp	r3, #15
 8000896:	d80a      	bhi.n	80008ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000898:	2200      	movs	r2, #0
 800089a:	6879      	ldr	r1, [r7, #4]
 800089c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008a0:	f000 f92f 	bl	8000b02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a4:	4a06      	ldr	r2, [pc, #24]	@ (80008c0 <HAL_InitTick+0x5c>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008aa:	2300      	movs	r3, #0
 80008ac:	e000      	b.n	80008b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000000 	.word	0x20000000
 80008bc:	20000008 	.word	0x20000008
 80008c0:	20000004 	.word	0x20000004

080008c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c8:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <HAL_IncTick+0x20>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <HAL_IncTick+0x24>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4413      	add	r3, r2
 80008d4:	4a04      	ldr	r2, [pc, #16]	@ (80008e8 <HAL_IncTick+0x24>)
 80008d6:	6013      	str	r3, [r2, #0]
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	20000008 	.word	0x20000008
 80008e8:	200001b0 	.word	0x200001b0

080008ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return uwTick;
 80008f0:	4b03      	ldr	r3, [pc, #12]	@ (8000900 <HAL_GetTick+0x14>)
 80008f2:	681b      	ldr	r3, [r3, #0]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	200001b0 	.word	0x200001b0

08000904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800090c:	f7ff ffee 	bl	80008ec <HAL_GetTick>
 8000910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800091c:	d005      	beq.n	800092a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800091e:	4b0a      	ldr	r3, [pc, #40]	@ (8000948 <HAL_Delay+0x44>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	461a      	mov	r2, r3
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	4413      	add	r3, r2
 8000928:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800092a:	bf00      	nop
 800092c:	f7ff ffde 	bl	80008ec <HAL_GetTick>
 8000930:	4602      	mov	r2, r0
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	429a      	cmp	r2, r3
 800093a:	d8f7      	bhi.n	800092c <HAL_Delay+0x28>
  {
  }
}
 800093c:	bf00      	nop
 800093e:	bf00      	nop
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000008 	.word	0x20000008

0800094c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800095c:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000968:	4013      	ands	r3, r2
 800096a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000974:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000978:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800097c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097e:	4a04      	ldr	r2, [pc, #16]	@ (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	60d3      	str	r3, [r2, #12]
}
 8000984:	bf00      	nop
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000998:	4b04      	ldr	r3, [pc, #16]	@ (80009ac <__NVIC_GetPriorityGrouping+0x18>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	f003 0307 	and.w	r3, r3, #7
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	db0b      	blt.n	80009da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	f003 021f 	and.w	r2, r3, #31
 80009c8:	4907      	ldr	r1, [pc, #28]	@ (80009e8 <__NVIC_EnableIRQ+0x38>)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	095b      	lsrs	r3, r3, #5
 80009d0:	2001      	movs	r0, #1
 80009d2:	fa00 f202 	lsl.w	r2, r0, r2
 80009d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000e100 	.word	0xe000e100

080009ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	6039      	str	r1, [r7, #0]
 80009f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	db0a      	blt.n	8000a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	490c      	ldr	r1, [pc, #48]	@ (8000a38 <__NVIC_SetPriority+0x4c>)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	0112      	lsls	r2, r2, #4
 8000a0c:	b2d2      	uxtb	r2, r2
 8000a0e:	440b      	add	r3, r1
 8000a10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a14:	e00a      	b.n	8000a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	4908      	ldr	r1, [pc, #32]	@ (8000a3c <__NVIC_SetPriority+0x50>)
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	f003 030f 	and.w	r3, r3, #15
 8000a22:	3b04      	subs	r3, #4
 8000a24:	0112      	lsls	r2, r2, #4
 8000a26:	b2d2      	uxtb	r2, r2
 8000a28:	440b      	add	r3, r1
 8000a2a:	761a      	strb	r2, [r3, #24]
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000e100 	.word	0xe000e100
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b089      	sub	sp, #36	@ 0x24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	f1c3 0307 	rsb	r3, r3, #7
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	bf28      	it	cs
 8000a5e:	2304      	movcs	r3, #4
 8000a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3304      	adds	r3, #4
 8000a66:	2b06      	cmp	r3, #6
 8000a68:	d902      	bls.n	8000a70 <NVIC_EncodePriority+0x30>
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3b03      	subs	r3, #3
 8000a6e:	e000      	b.n	8000a72 <NVIC_EncodePriority+0x32>
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	43da      	mvns	r2, r3
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	401a      	ands	r2, r3
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a92:	43d9      	mvns	r1, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	4313      	orrs	r3, r2
         );
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3724      	adds	r7, #36	@ 0x24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
	...

08000aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ab8:	d301      	bcc.n	8000abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aba:	2301      	movs	r3, #1
 8000abc:	e00f      	b.n	8000ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000abe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae8 <SysTick_Config+0x40>)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac6:	210f      	movs	r1, #15
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000acc:	f7ff ff8e 	bl	80009ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad0:	4b05      	ldr	r3, [pc, #20]	@ (8000ae8 <SysTick_Config+0x40>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad6:	4b04      	ldr	r3, [pc, #16]	@ (8000ae8 <SysTick_Config+0x40>)
 8000ad8:	2207      	movs	r2, #7
 8000ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	e000e010 	.word	0xe000e010

08000aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff ff29 	bl	800094c <__NVIC_SetPriorityGrouping>
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b086      	sub	sp, #24
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	4603      	mov	r3, r0
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
 8000b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b14:	f7ff ff3e 	bl	8000994 <__NVIC_GetPriorityGrouping>
 8000b18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	68b9      	ldr	r1, [r7, #8]
 8000b1e:	6978      	ldr	r0, [r7, #20]
 8000b20:	f7ff ff8e 	bl	8000a40 <NVIC_EncodePriority>
 8000b24:	4602      	mov	r2, r0
 8000b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff ff5d 	bl	80009ec <__NVIC_SetPriority>
}
 8000b32:	bf00      	nop
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	4603      	mov	r3, r0
 8000b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff ff31 	bl	80009b0 <__NVIC_EnableIRQ>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff ffa2 	bl	8000aa8 <SysTick_Config>
 8000b64:	4603      	mov	r3, r0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b089      	sub	sp, #36	@ 0x24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
 8000b8a:	e159      	b.n	8000e40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	697a      	ldr	r2, [r7, #20]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	f040 8148 	bne.w	8000e3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f003 0303 	and.w	r3, r3, #3
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d005      	beq.n	8000bc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	d130      	bne.n	8000c24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	2203      	movs	r2, #3
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	68da      	ldr	r2, [r3, #12]
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	69ba      	ldr	r2, [r7, #24]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	43db      	mvns	r3, r3
 8000c02:	69ba      	ldr	r2, [r7, #24]
 8000c04:	4013      	ands	r3, r2
 8000c06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	091b      	lsrs	r3, r3, #4
 8000c0e:	f003 0201 	and.w	r2, r3, #1
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f003 0303 	and.w	r3, r3, #3
 8000c2c:	2b03      	cmp	r3, #3
 8000c2e:	d017      	beq.n	8000c60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	4013      	ands	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	689a      	ldr	r2, [r3, #8]
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f003 0303 	and.w	r3, r3, #3
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	d123      	bne.n	8000cb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	08da      	lsrs	r2, r3, #3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3208      	adds	r2, #8
 8000c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	f003 0307 	and.w	r3, r3, #7
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	220f      	movs	r2, #15
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	691a      	ldr	r2, [r3, #16]
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	08da      	lsrs	r2, r3, #3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3208      	adds	r2, #8
 8000cae:	69b9      	ldr	r1, [r7, #24]
 8000cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 0203 	and.w	r2, r3, #3
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	f000 80a2 	beq.w	8000e3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b57      	ldr	r3, [pc, #348]	@ (8000e58 <HAL_GPIO_Init+0x2e8>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfe:	4a56      	ldr	r2, [pc, #344]	@ (8000e58 <HAL_GPIO_Init+0x2e8>)
 8000d00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d06:	4b54      	ldr	r3, [pc, #336]	@ (8000e58 <HAL_GPIO_Init+0x2e8>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d12:	4a52      	ldr	r2, [pc, #328]	@ (8000e5c <HAL_GPIO_Init+0x2ec>)
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	089b      	lsrs	r3, r3, #2
 8000d18:	3302      	adds	r3, #2
 8000d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f003 0303 	and.w	r3, r3, #3
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	220f      	movs	r2, #15
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4013      	ands	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a49      	ldr	r2, [pc, #292]	@ (8000e60 <HAL_GPIO_Init+0x2f0>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d019      	beq.n	8000d72 <HAL_GPIO_Init+0x202>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a48      	ldr	r2, [pc, #288]	@ (8000e64 <HAL_GPIO_Init+0x2f4>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d013      	beq.n	8000d6e <HAL_GPIO_Init+0x1fe>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a47      	ldr	r2, [pc, #284]	@ (8000e68 <HAL_GPIO_Init+0x2f8>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d00d      	beq.n	8000d6a <HAL_GPIO_Init+0x1fa>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a46      	ldr	r2, [pc, #280]	@ (8000e6c <HAL_GPIO_Init+0x2fc>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d007      	beq.n	8000d66 <HAL_GPIO_Init+0x1f6>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a45      	ldr	r2, [pc, #276]	@ (8000e70 <HAL_GPIO_Init+0x300>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d101      	bne.n	8000d62 <HAL_GPIO_Init+0x1f2>
 8000d5e:	2304      	movs	r3, #4
 8000d60:	e008      	b.n	8000d74 <HAL_GPIO_Init+0x204>
 8000d62:	2307      	movs	r3, #7
 8000d64:	e006      	b.n	8000d74 <HAL_GPIO_Init+0x204>
 8000d66:	2303      	movs	r3, #3
 8000d68:	e004      	b.n	8000d74 <HAL_GPIO_Init+0x204>
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	e002      	b.n	8000d74 <HAL_GPIO_Init+0x204>
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e000      	b.n	8000d74 <HAL_GPIO_Init+0x204>
 8000d72:	2300      	movs	r3, #0
 8000d74:	69fa      	ldr	r2, [r7, #28]
 8000d76:	f002 0203 	and.w	r2, r2, #3
 8000d7a:	0092      	lsls	r2, r2, #2
 8000d7c:	4093      	lsls	r3, r2
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d84:	4935      	ldr	r1, [pc, #212]	@ (8000e5c <HAL_GPIO_Init+0x2ec>)
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	089b      	lsrs	r3, r3, #2
 8000d8a:	3302      	adds	r3, #2
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d92:	4b38      	ldr	r3, [pc, #224]	@ (8000e74 <HAL_GPIO_Init+0x304>)
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d003      	beq.n	8000db6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000db6:	4a2f      	ldr	r2, [pc, #188]	@ (8000e74 <HAL_GPIO_Init+0x304>)
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dbc:	4b2d      	ldr	r3, [pc, #180]	@ (8000e74 <HAL_GPIO_Init+0x304>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d003      	beq.n	8000de0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000de0:	4a24      	ldr	r2, [pc, #144]	@ (8000e74 <HAL_GPIO_Init+0x304>)
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000de6:	4b23      	ldr	r3, [pc, #140]	@ (8000e74 <HAL_GPIO_Init+0x304>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	43db      	mvns	r3, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4013      	ands	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d003      	beq.n	8000e0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e0a:	4a1a      	ldr	r2, [pc, #104]	@ (8000e74 <HAL_GPIO_Init+0x304>)
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e10:	4b18      	ldr	r3, [pc, #96]	@ (8000e74 <HAL_GPIO_Init+0x304>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d003      	beq.n	8000e34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e34:	4a0f      	ldr	r2, [pc, #60]	@ (8000e74 <HAL_GPIO_Init+0x304>)
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	61fb      	str	r3, [r7, #28]
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	2b0f      	cmp	r3, #15
 8000e44:	f67f aea2 	bls.w	8000b8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e48:	bf00      	nop
 8000e4a:	bf00      	nop
 8000e4c:	3724      	adds	r7, #36	@ 0x24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40013800 	.word	0x40013800
 8000e60:	40020000 	.word	0x40020000
 8000e64:	40020400 	.word	0x40020400
 8000e68:	40020800 	.word	0x40020800
 8000e6c:	40020c00 	.word	0x40020c00
 8000e70:	40021000 	.word	0x40021000
 8000e74:	40013c00 	.word	0x40013c00

08000e78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	460b      	mov	r3, r1
 8000e82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	691a      	ldr	r2, [r3, #16]
 8000e88:	887b      	ldrh	r3, [r7, #2]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d002      	beq.n	8000e96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e90:	2301      	movs	r3, #1
 8000e92:	73fb      	strb	r3, [r7, #15]
 8000e94:	e001      	b.n	8000e9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e96:	2300      	movs	r3, #0
 8000e98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af02      	add	r7, sp, #8
 8000eae:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e101      	b.n	80010be <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d106      	bne.n	8000eda <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f005 f86d 	bl	8005fb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2203      	movs	r2, #3
 8000ede:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ee8:	d102      	bne.n	8000ef0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f001 ff98 	bl	8002e2a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6818      	ldr	r0, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	7c1a      	ldrb	r2, [r3, #16]
 8000f02:	f88d 2000 	strb.w	r2, [sp]
 8000f06:	3304      	adds	r3, #4
 8000f08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f0a:	f001 fe77 	bl	8002bfc <USB_CoreInit>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d005      	beq.n	8000f20 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2202      	movs	r2, #2
 8000f18:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e0ce      	b.n	80010be <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f001 ff90 	bl	8002e4c <USB_SetCurrentMode>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d005      	beq.n	8000f3e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2202      	movs	r2, #2
 8000f36:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e0bf      	b.n	80010be <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73fb      	strb	r3, [r7, #15]
 8000f42:	e04a      	b.n	8000fda <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f44:	7bfa      	ldrb	r2, [r7, #15]
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	4413      	add	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	440b      	add	r3, r1
 8000f52:	3315      	adds	r3, #21
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f58:	7bfa      	ldrb	r2, [r7, #15]
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	4413      	add	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	440b      	add	r3, r1
 8000f66:	3314      	adds	r3, #20
 8000f68:	7bfa      	ldrb	r2, [r7, #15]
 8000f6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f6c:	7bfa      	ldrb	r2, [r7, #15]
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	b298      	uxth	r0, r3
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	4613      	mov	r3, r2
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	4413      	add	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	332e      	adds	r3, #46	@ 0x2e
 8000f80:	4602      	mov	r2, r0
 8000f82:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f84:	7bfa      	ldrb	r2, [r7, #15]
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	4413      	add	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	3318      	adds	r3, #24
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f98:	7bfa      	ldrb	r2, [r7, #15]
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	4413      	add	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	331c      	adds	r3, #28
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fac:	7bfa      	ldrb	r2, [r7, #15]
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	4413      	add	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	440b      	add	r3, r1
 8000fba:	3320      	adds	r3, #32
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fc0:	7bfa      	ldrb	r2, [r7, #15]
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	4413      	add	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	440b      	add	r3, r1
 8000fce:	3324      	adds	r3, #36	@ 0x24
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	73fb      	strb	r3, [r7, #15]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	791b      	ldrb	r3, [r3, #4]
 8000fde:	7bfa      	ldrb	r2, [r7, #15]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d3af      	bcc.n	8000f44 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	73fb      	strb	r3, [r7, #15]
 8000fe8:	e044      	b.n	8001074 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fea:	7bfa      	ldrb	r2, [r7, #15]
 8000fec:	6879      	ldr	r1, [r7, #4]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	4413      	add	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001000:	7bfa      	ldrb	r2, [r7, #15]
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	4613      	mov	r3, r2
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	4413      	add	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	440b      	add	r3, r1
 800100e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001012:	7bfa      	ldrb	r2, [r7, #15]
 8001014:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001016:	7bfa      	ldrb	r2, [r7, #15]
 8001018:	6879      	ldr	r1, [r7, #4]
 800101a:	4613      	mov	r3, r2
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	4413      	add	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	440b      	add	r3, r1
 8001024:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800102c:	7bfa      	ldrb	r2, [r7, #15]
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	4613      	mov	r3, r2
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	4413      	add	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	440b      	add	r3, r1
 800103a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001042:	7bfa      	ldrb	r2, [r7, #15]
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	4613      	mov	r3, r2
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	4413      	add	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	440b      	add	r3, r1
 8001050:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001058:	7bfa      	ldrb	r2, [r7, #15]
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	4613      	mov	r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	4413      	add	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	3301      	adds	r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	791b      	ldrb	r3, [r3, #4]
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	429a      	cmp	r2, r3
 800107c:	d3b5      	bcc.n	8000fea <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6818      	ldr	r0, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	7c1a      	ldrb	r2, [r3, #16]
 8001086:	f88d 2000 	strb.w	r2, [sp]
 800108a:	3304      	adds	r3, #4
 800108c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800108e:	f001 ff29 	bl	8002ee4 <USB_DevInit>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d005      	beq.n	80010a4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2202      	movs	r2, #2
 800109c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e00c      	b.n	80010be <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2201      	movs	r2, #1
 80010ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f002 ff73 	bl	8003fa2 <USB_DevDisconnect>

  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b084      	sub	sp, #16
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d101      	bne.n	80010e2 <HAL_PCD_Start+0x1c>
 80010de:	2302      	movs	r3, #2
 80010e0:	e022      	b.n	8001128 <HAL_PCD_Start+0x62>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2201      	movs	r2, #1
 80010e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d009      	beq.n	800110a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d105      	bne.n	800110a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001102:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f001 fe7a 	bl	8002e08 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f002 ff21 	bl	8003f60 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b08d      	sub	sp, #52	@ 0x34
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800113e:	6a3b      	ldr	r3, [r7, #32]
 8001140:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f002 ffdf 	bl	800410a <USB_GetMode>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	f040 848c 	bne.w	8001a6c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f002 ff43 	bl	8003fe4 <USB_ReadInterrupts>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	f000 8482 	beq.w	8001a6a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	0a1b      	lsrs	r3, r3, #8
 8001170:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f002 ff30 	bl	8003fe4 <USB_ReadInterrupts>
 8001184:	4603      	mov	r3, r0
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b02      	cmp	r3, #2
 800118c:	d107      	bne.n	800119e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	695a      	ldr	r2, [r3, #20]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f002 0202 	and.w	r2, r2, #2
 800119c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f002 ff1e 	bl	8003fe4 <USB_ReadInterrupts>
 80011a8:	4603      	mov	r3, r0
 80011aa:	f003 0310 	and.w	r3, r3, #16
 80011ae:	2b10      	cmp	r3, #16
 80011b0:	d161      	bne.n	8001276 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	699a      	ldr	r2, [r3, #24]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 0210 	bic.w	r2, r2, #16
 80011c0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80011c2:	6a3b      	ldr	r3, [r7, #32]
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	f003 020f 	and.w	r2, r3, #15
 80011ce:	4613      	mov	r3, r2
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	4413      	add	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	3304      	adds	r3, #4
 80011e0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80011e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80011ec:	d124      	bne.n	8001238 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d035      	beq.n	8001266 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	091b      	lsrs	r3, r3, #4
 8001202:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001204:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001208:	b29b      	uxth	r3, r3
 800120a:	461a      	mov	r2, r3
 800120c:	6a38      	ldr	r0, [r7, #32]
 800120e:	f002 fd55 	bl	8003cbc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	68da      	ldr	r2, [r3, #12]
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	091b      	lsrs	r3, r3, #4
 800121a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800121e:	441a      	add	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	695a      	ldr	r2, [r3, #20]
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	091b      	lsrs	r3, r3, #4
 800122c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001230:	441a      	add	r2, r3
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	615a      	str	r2, [r3, #20]
 8001236:	e016      	b.n	8001266 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800123e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001242:	d110      	bne.n	8001266 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800124a:	2208      	movs	r2, #8
 800124c:	4619      	mov	r1, r3
 800124e:	6a38      	ldr	r0, [r7, #32]
 8001250:	f002 fd34 	bl	8003cbc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	695a      	ldr	r2, [r3, #20]
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	091b      	lsrs	r3, r3, #4
 800125c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001260:	441a      	add	r2, r3
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	699a      	ldr	r2, [r3, #24]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f042 0210 	orr.w	r2, r2, #16
 8001274:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f002 feb2 	bl	8003fe4 <USB_ReadInterrupts>
 8001280:	4603      	mov	r3, r0
 8001282:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001286:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800128a:	f040 80a7 	bne.w	80013dc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f002 feb7 	bl	800400a <USB_ReadDevAllOutEpInterrupt>
 800129c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800129e:	e099      	b.n	80013d4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80012a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 808e 	beq.w	80013c8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	4611      	mov	r1, r2
 80012b6:	4618      	mov	r0, r3
 80012b8:	f002 fedb 	bl	8004072 <USB_ReadDevOutEPInterrupt>
 80012bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00c      	beq.n	80012e2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80012c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ca:	015a      	lsls	r2, r3, #5
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	4413      	add	r3, r2
 80012d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80012d4:	461a      	mov	r2, r3
 80012d6:	2301      	movs	r3, #1
 80012d8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80012da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 fe8b 	bl	8001ff8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	f003 0308 	and.w	r3, r3, #8
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d00c      	beq.n	8001306 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80012ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ee:	015a      	lsls	r2, r3, #5
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	4413      	add	r3, r2
 80012f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80012f8:	461a      	mov	r2, r3
 80012fa:	2308      	movs	r3, #8
 80012fc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80012fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 ff61 	bl	80021c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	f003 0310 	and.w	r3, r3, #16
 800130c:	2b00      	cmp	r3, #0
 800130e:	d008      	beq.n	8001322 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001312:	015a      	lsls	r2, r3, #5
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	4413      	add	r3, r2
 8001318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800131c:	461a      	mov	r2, r3
 800131e:	2310      	movs	r3, #16
 8001320:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d030      	beq.n	800138e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001334:	2b80      	cmp	r3, #128	@ 0x80
 8001336:	d109      	bne.n	800134c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	69fa      	ldr	r2, [r7, #28]
 8001342:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001346:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800134a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800134c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800134e:	4613      	mov	r3, r2
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	4413      	add	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	3304      	adds	r3, #4
 8001360:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	78db      	ldrb	r3, [r3, #3]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d108      	bne.n	800137c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	2200      	movs	r2, #0
 800136e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001372:	b2db      	uxtb	r3, r3
 8001374:	4619      	mov	r1, r3
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f004 ff18 	bl	80061ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800137c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137e:	015a      	lsls	r2, r3, #5
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	4413      	add	r3, r2
 8001384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001388:	461a      	mov	r2, r3
 800138a:	2302      	movs	r3, #2
 800138c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	f003 0320 	and.w	r3, r3, #32
 8001394:	2b00      	cmp	r3, #0
 8001396:	d008      	beq.n	80013aa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139a:	015a      	lsls	r2, r3, #5
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	4413      	add	r3, r2
 80013a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013a4:	461a      	mov	r2, r3
 80013a6:	2320      	movs	r3, #32
 80013a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d009      	beq.n	80013c8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80013b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b6:	015a      	lsls	r2, r3, #5
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	4413      	add	r3, r2
 80013bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013c0:	461a      	mov	r2, r3
 80013c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013c6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80013c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ca:	3301      	adds	r3, #1
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80013ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013d0:	085b      	lsrs	r3, r3, #1
 80013d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80013d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f47f af62 	bne.w	80012a0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f002 fdff 	bl	8003fe4 <USB_ReadInterrupts>
 80013e6:	4603      	mov	r3, r0
 80013e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80013f0:	f040 80db 	bne.w	80015aa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f002 fe20 	bl	800403e <USB_ReadDevAllInEpInterrupt>
 80013fe:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001404:	e0cd      	b.n	80015a2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 80c2 	beq.w	8001596 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f002 fe46 	bl	80040ae <USB_ReadDevInEPInterrupt>
 8001422:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	d057      	beq.n	80014de <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800142e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001430:	f003 030f 	and.w	r3, r3, #15
 8001434:	2201      	movs	r2, #1
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001442:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	43db      	mvns	r3, r3
 8001448:	69f9      	ldr	r1, [r7, #28]
 800144a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800144e:	4013      	ands	r3, r2
 8001450:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001454:	015a      	lsls	r2, r3, #5
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	4413      	add	r3, r2
 800145a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800145e:	461a      	mov	r2, r3
 8001460:	2301      	movs	r3, #1
 8001462:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	799b      	ldrb	r3, [r3, #6]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d132      	bne.n	80014d2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001470:	4613      	mov	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	4413      	add	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	3320      	adds	r3, #32
 800147c:	6819      	ldr	r1, [r3, #0]
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001482:	4613      	mov	r3, r2
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	4413      	add	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4403      	add	r3, r0
 800148c:	331c      	adds	r3, #28
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4419      	add	r1, r3
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001496:	4613      	mov	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	4413      	add	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4403      	add	r3, r0
 80014a0:	3320      	adds	r3, #32
 80014a2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80014a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d113      	bne.n	80014d2 <HAL_PCD_IRQHandler+0x3a2>
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014ae:	4613      	mov	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	4413      	add	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	440b      	add	r3, r1
 80014b8:	3324      	adds	r3, #36	@ 0x24
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d108      	bne.n	80014d2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6818      	ldr	r0, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80014ca:	461a      	mov	r2, r3
 80014cc:	2101      	movs	r1, #1
 80014ce:	f002 fe4d 	bl	800416c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80014d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	4619      	mov	r1, r3
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f004 fdec 	bl	80060b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	f003 0308 	and.w	r3, r3, #8
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d008      	beq.n	80014fa <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80014e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ea:	015a      	lsls	r2, r3, #5
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	4413      	add	r3, r2
 80014f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80014f4:	461a      	mov	r2, r3
 80014f6:	2308      	movs	r3, #8
 80014f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	f003 0310 	and.w	r3, r3, #16
 8001500:	2b00      	cmp	r3, #0
 8001502:	d008      	beq.n	8001516 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001506:	015a      	lsls	r2, r3, #5
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	4413      	add	r3, r2
 800150c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001510:	461a      	mov	r2, r3
 8001512:	2310      	movs	r3, #16
 8001514:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800151c:	2b00      	cmp	r3, #0
 800151e:	d008      	beq.n	8001532 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001522:	015a      	lsls	r2, r3, #5
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	4413      	add	r3, r2
 8001528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800152c:	461a      	mov	r2, r3
 800152e:	2340      	movs	r3, #64	@ 0x40
 8001530:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d023      	beq.n	8001584 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800153c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800153e:	6a38      	ldr	r0, [r7, #32]
 8001540:	f001 fe34 	bl	80031ac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001546:	4613      	mov	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	4413      	add	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	3310      	adds	r3, #16
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	3304      	adds	r3, #4
 8001556:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	78db      	ldrb	r3, [r3, #3]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d108      	bne.n	8001572 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	2200      	movs	r2, #0
 8001564:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001568:	b2db      	uxtb	r3, r3
 800156a:	4619      	mov	r1, r3
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f004 fe2f 	bl	80061d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001574:	015a      	lsls	r2, r3, #5
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	4413      	add	r3, r2
 800157a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800157e:	461a      	mov	r2, r3
 8001580:	2302      	movs	r3, #2
 8001582:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800158e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 fca5 	bl	8001ee0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001598:	3301      	adds	r3, #1
 800159a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800159c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800159e:	085b      	lsrs	r3, r3, #1
 80015a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80015a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f47f af2e 	bne.w	8001406 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f002 fd18 	bl	8003fe4 <USB_ReadInterrupts>
 80015b4:	4603      	mov	r3, r0
 80015b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80015ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80015be:	d122      	bne.n	8001606 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	69fa      	ldr	r2, [r7, #28]
 80015ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80015ce:	f023 0301 	bic.w	r3, r3, #1
 80015d2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d108      	bne.n	80015f0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015e6:	2100      	movs	r1, #0
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 fe8b 	bl	8002304 <HAL_PCDEx_LPM_Callback>
 80015ee:	e002      	b.n	80015f6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f004 fdcd 	bl	8006190 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	695a      	ldr	r2, [r3, #20]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001604:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f002 fcea 	bl	8003fe4 <USB_ReadInterrupts>
 8001610:	4603      	mov	r3, r0
 8001612:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001616:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800161a:	d112      	bne.n	8001642 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b01      	cmp	r3, #1
 800162a:	d102      	bne.n	8001632 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f004 fd89 	bl	8006144 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	695a      	ldr	r2, [r3, #20]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001640:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f002 fccc 	bl	8003fe4 <USB_ReadInterrupts>
 800164c:	4603      	mov	r3, r0
 800164e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001652:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001656:	f040 80b7 	bne.w	80017c8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001668:	f023 0301 	bic.w	r3, r3, #1
 800166c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2110      	movs	r1, #16
 8001674:	4618      	mov	r0, r3
 8001676:	f001 fd99 	bl	80031ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800167a:	2300      	movs	r3, #0
 800167c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800167e:	e046      	b.n	800170e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001682:	015a      	lsls	r2, r3, #5
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	4413      	add	r3, r2
 8001688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800168c:	461a      	mov	r2, r3
 800168e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001692:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001696:	015a      	lsls	r2, r3, #5
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	4413      	add	r3, r2
 800169c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016a4:	0151      	lsls	r1, r2, #5
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	440a      	add	r2, r1
 80016aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80016ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80016b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80016b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016b6:	015a      	lsls	r2, r3, #5
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	4413      	add	r3, r2
 80016bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016c0:	461a      	mov	r2, r3
 80016c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80016c6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80016c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016ca:	015a      	lsls	r2, r3, #5
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	4413      	add	r3, r2
 80016d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016d8:	0151      	lsls	r1, r2, #5
 80016da:	69fa      	ldr	r2, [r7, #28]
 80016dc:	440a      	add	r2, r1
 80016de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80016e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80016e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80016e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016ea:	015a      	lsls	r2, r3, #5
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	4413      	add	r3, r2
 80016f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016f8:	0151      	lsls	r1, r2, #5
 80016fa:	69fa      	ldr	r2, [r7, #28]
 80016fc:	440a      	add	r2, r1
 80016fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001702:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001706:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800170a:	3301      	adds	r3, #1
 800170c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	791b      	ldrb	r3, [r3, #4]
 8001712:	461a      	mov	r2, r3
 8001714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001716:	4293      	cmp	r3, r2
 8001718:	d3b2      	bcc.n	8001680 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	69fa      	ldr	r2, [r7, #28]
 8001724:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001728:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800172c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	7bdb      	ldrb	r3, [r3, #15]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d016      	beq.n	8001764 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800173c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001740:	69fa      	ldr	r2, [r7, #28]
 8001742:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001746:	f043 030b 	orr.w	r3, r3, #11
 800174a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001756:	69fa      	ldr	r2, [r7, #28]
 8001758:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800175c:	f043 030b 	orr.w	r3, r3, #11
 8001760:	6453      	str	r3, [r2, #68]	@ 0x44
 8001762:	e015      	b.n	8001790 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	69fa      	ldr	r2, [r7, #28]
 800176e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001772:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001776:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800177a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	69fa      	ldr	r2, [r7, #28]
 8001786:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800178a:	f043 030b 	orr.w	r3, r3, #11
 800178e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	69fa      	ldr	r2, [r7, #28]
 800179a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800179e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80017a2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017b2:	461a      	mov	r2, r3
 80017b4:	f002 fcda 	bl	800416c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	695a      	ldr	r2, [r3, #20]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80017c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f002 fc09 	bl	8003fe4 <USB_ReadInterrupts>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017dc:	d123      	bne.n	8001826 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f002 fc9f 	bl	8004126 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f001 fd56 	bl	800329e <USB_GetDevSpeed>
 80017f2:	4603      	mov	r3, r0
 80017f4:	461a      	mov	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681c      	ldr	r4, [r3, #0]
 80017fe:	f001 f9f1 	bl	8002be4 <HAL_RCC_GetHCLKFreq>
 8001802:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001808:	461a      	mov	r2, r3
 800180a:	4620      	mov	r0, r4
 800180c:	f001 fa5a 	bl	8002cc4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f004 fc78 	bl	8006106 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	695a      	ldr	r2, [r3, #20]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001824:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f002 fbda 	bl	8003fe4 <USB_ReadInterrupts>
 8001830:	4603      	mov	r3, r0
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b08      	cmp	r3, #8
 8001838:	d10a      	bne.n	8001850 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f004 fc55 	bl	80060ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	695a      	ldr	r2, [r3, #20]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f002 0208 	and.w	r2, r2, #8
 800184e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f002 fbc5 	bl	8003fe4 <USB_ReadInterrupts>
 800185a:	4603      	mov	r3, r0
 800185c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001860:	2b80      	cmp	r3, #128	@ 0x80
 8001862:	d123      	bne.n	80018ac <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001870:	2301      	movs	r3, #1
 8001872:	627b      	str	r3, [r7, #36]	@ 0x24
 8001874:	e014      	b.n	80018a0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800187a:	4613      	mov	r3, r2
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	4413      	add	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	440b      	add	r3, r1
 8001884:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d105      	bne.n	800189a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800188e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001890:	b2db      	uxtb	r3, r3
 8001892:	4619      	mov	r1, r3
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 faf2 	bl	8001e7e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800189a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189c:	3301      	adds	r3, #1
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	791b      	ldrb	r3, [r3, #4]
 80018a4:	461a      	mov	r2, r3
 80018a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d3e4      	bcc.n	8001876 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f002 fb97 	bl	8003fe4 <USB_ReadInterrupts>
 80018b6:	4603      	mov	r3, r0
 80018b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80018c0:	d13c      	bne.n	800193c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018c2:	2301      	movs	r3, #1
 80018c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80018c6:	e02b      	b.n	8001920 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80018c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ca:	015a      	lsls	r2, r3, #5
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	4413      	add	r3, r2
 80018d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018dc:	4613      	mov	r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	3318      	adds	r3, #24
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d115      	bne.n	800191a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80018ee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	da12      	bge.n	800191a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018f8:	4613      	mov	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	4413      	add	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	3317      	adds	r3, #23
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190a:	b2db      	uxtb	r3, r3
 800190c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001910:	b2db      	uxtb	r3, r3
 8001912:	4619      	mov	r1, r3
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 fab2 	bl	8001e7e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800191a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191c:	3301      	adds	r3, #1
 800191e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	791b      	ldrb	r3, [r3, #4]
 8001924:	461a      	mov	r2, r3
 8001926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001928:	4293      	cmp	r3, r2
 800192a:	d3cd      	bcc.n	80018c8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	695a      	ldr	r2, [r3, #20]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800193a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f002 fb4f 	bl	8003fe4 <USB_ReadInterrupts>
 8001946:	4603      	mov	r3, r0
 8001948:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800194c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001950:	d156      	bne.n	8001a00 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001952:	2301      	movs	r3, #1
 8001954:	627b      	str	r3, [r7, #36]	@ 0x24
 8001956:	e045      	b.n	80019e4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195a:	015a      	lsls	r2, r3, #5
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	4413      	add	r3, r2
 8001960:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800196c:	4613      	mov	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	4413      	add	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d12e      	bne.n	80019de <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001980:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001982:	2b00      	cmp	r3, #0
 8001984:	da2b      	bge.n	80019de <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	0c1a      	lsrs	r2, r3, #16
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001990:	4053      	eors	r3, r2
 8001992:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001996:	2b00      	cmp	r3, #0
 8001998:	d121      	bne.n	80019de <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800199e:	4613      	mov	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	4413      	add	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80019ac:	2201      	movs	r2, #1
 80019ae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d10a      	bne.n	80019de <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	69fa      	ldr	r2, [r7, #28]
 80019d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019da:	6053      	str	r3, [r2, #4]
            break;
 80019dc:	e008      	b.n	80019f0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e0:	3301      	adds	r3, #1
 80019e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	791b      	ldrb	r3, [r3, #4]
 80019e8:	461a      	mov	r2, r3
 80019ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d3b3      	bcc.n	8001958 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	695a      	ldr	r2, [r3, #20]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80019fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f002 faed 	bl	8003fe4 <USB_ReadInterrupts>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a14:	d10a      	bne.n	8001a2c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f004 fbec 	bl	80061f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	695a      	ldr	r2, [r3, #20]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001a2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f002 fad7 	bl	8003fe4 <USB_ReadInterrupts>
 8001a36:	4603      	mov	r3, r0
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	d115      	bne.n	8001a6c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d002      	beq.n	8001a58 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f004 fbdc 	bl	8006210 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6859      	ldr	r1, [r3, #4]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	e000      	b.n	8001a6c <HAL_PCD_IRQHandler+0x93c>
      return;
 8001a6a:	bf00      	nop
    }
  }
}
 8001a6c:	3734      	adds	r7, #52	@ 0x34
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd90      	pop	{r4, r7, pc}

08001a72 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d101      	bne.n	8001a8c <HAL_PCD_SetAddress+0x1a>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e012      	b.n	8001ab2 <HAL_PCD_SetAddress+0x40>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	78fa      	ldrb	r2, [r7, #3]
 8001a98:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	78fa      	ldrb	r2, [r7, #3]
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f002 fa36 	bl	8003f14 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	4608      	mov	r0, r1
 8001ac4:	4611      	mov	r1, r2
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4603      	mov	r3, r0
 8001aca:	70fb      	strb	r3, [r7, #3]
 8001acc:	460b      	mov	r3, r1
 8001ace:	803b      	strh	r3, [r7, #0]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ad8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	da0f      	bge.n	8001b00 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ae0:	78fb      	ldrb	r3, [r7, #3]
 8001ae2:	f003 020f 	and.w	r2, r3, #15
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	4413      	add	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	3310      	adds	r3, #16
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	4413      	add	r3, r2
 8001af4:	3304      	adds	r3, #4
 8001af6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2201      	movs	r2, #1
 8001afc:	705a      	strb	r2, [r3, #1]
 8001afe:	e00f      	b.n	8001b20 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	f003 020f 	and.w	r2, r3, #15
 8001b06:	4613      	mov	r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	3304      	adds	r3, #4
 8001b18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b20:	78fb      	ldrb	r3, [r7, #3]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001b2c:	883b      	ldrh	r3, [r7, #0]
 8001b2e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	78ba      	ldrb	r2, [r7, #2]
 8001b3a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	785b      	ldrb	r3, [r3, #1]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d004      	beq.n	8001b4e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b4e:	78bb      	ldrb	r3, [r7, #2]
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d102      	bne.n	8001b5a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <HAL_PCD_EP_Open+0xae>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e00e      	b.n	8001b86 <HAL_PCD_EP_Open+0xcc>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68f9      	ldr	r1, [r7, #12]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f001 fbb6 	bl	80032e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001b84:	7afb      	ldrb	r3, [r7, #11]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b084      	sub	sp, #16
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	460b      	mov	r3, r1
 8001b98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	da0f      	bge.n	8001bc2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	f003 020f 	and.w	r2, r3, #15
 8001ba8:	4613      	mov	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	4413      	add	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	3310      	adds	r3, #16
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	705a      	strb	r2, [r3, #1]
 8001bc0:	e00f      	b.n	8001be2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bc2:	78fb      	ldrb	r3, [r7, #3]
 8001bc4:	f003 020f 	and.w	r2, r3, #15
 8001bc8:	4613      	mov	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3304      	adds	r3, #4
 8001bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	f003 030f 	and.w	r3, r3, #15
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d101      	bne.n	8001bfc <HAL_PCD_EP_Close+0x6e>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e00e      	b.n	8001c1a <HAL_PCD_EP_Close+0x8c>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68f9      	ldr	r1, [r7, #12]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f001 fbf4 	bl	80033f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b086      	sub	sp, #24
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	607a      	str	r2, [r7, #4]
 8001c2c:	603b      	str	r3, [r7, #0]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c32:	7afb      	ldrb	r3, [r7, #11]
 8001c34:	f003 020f 	and.w	r2, r3, #15
 8001c38:	4613      	mov	r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	4413      	add	r3, r2
 8001c48:	3304      	adds	r3, #4
 8001c4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	2200      	movs	r2, #0
 8001c62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c64:	7afb      	ldrb	r3, [r7, #11]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	799b      	ldrb	r3, [r3, #6]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d102      	bne.n	8001c7e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6818      	ldr	r0, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	799b      	ldrb	r3, [r3, #6]
 8001c86:	461a      	mov	r2, r3
 8001c88:	6979      	ldr	r1, [r7, #20]
 8001c8a:	f001 fc91 	bl	80035b0 <USB_EPStartXfer>

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ca8:	7afb      	ldrb	r3, [r7, #11]
 8001caa:	f003 020f 	and.w	r2, r3, #15
 8001cae:	4613      	mov	r3, r2
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	3310      	adds	r3, #16
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4413      	add	r3, r2
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cd8:	7afb      	ldrb	r3, [r7, #11]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	799b      	ldrb	r3, [r3, #6]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d102      	bne.n	8001cf2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6818      	ldr	r0, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	799b      	ldrb	r3, [r3, #6]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	6979      	ldr	r1, [r7, #20]
 8001cfe:	f001 fc57 	bl	80035b0 <USB_EPStartXfer>

  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	7912      	ldrb	r2, [r2, #4]
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d901      	bls.n	8001d2a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e04f      	b.n	8001dca <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	da0f      	bge.n	8001d52 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	f003 020f 	and.w	r2, r3, #15
 8001d38:	4613      	mov	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	3310      	adds	r3, #16
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	3304      	adds	r3, #4
 8001d48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	705a      	strb	r2, [r3, #1]
 8001d50:	e00d      	b.n	8001d6e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d52:	78fa      	ldrb	r2, [r7, #3]
 8001d54:	4613      	mov	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4413      	add	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	4413      	add	r3, r2
 8001d64:	3304      	adds	r3, #4
 8001d66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2201      	movs	r2, #1
 8001d72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d101      	bne.n	8001d8e <HAL_PCD_EP_SetStall+0x82>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e01d      	b.n	8001dca <HAL_PCD_EP_SetStall+0xbe>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68f9      	ldr	r1, [r7, #12]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f001 ffe5 	bl	8003d6c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001da2:	78fb      	ldrb	r3, [r7, #3]
 8001da4:	f003 030f 	and.w	r3, r3, #15
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d109      	bne.n	8001dc0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6818      	ldr	r0, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	7999      	ldrb	r1, [r3, #6]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001dba:	461a      	mov	r2, r3
 8001dbc:	f002 f9d6 	bl	800416c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b084      	sub	sp, #16
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001dde:	78fb      	ldrb	r3, [r7, #3]
 8001de0:	f003 030f 	and.w	r3, r3, #15
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	7912      	ldrb	r2, [r2, #4]
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d901      	bls.n	8001df0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e042      	b.n	8001e76 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001df0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	da0f      	bge.n	8001e18 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	f003 020f 	and.w	r2, r3, #15
 8001dfe:	4613      	mov	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	4413      	add	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	3310      	adds	r3, #16
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2201      	movs	r2, #1
 8001e14:	705a      	strb	r2, [r3, #1]
 8001e16:	e00f      	b.n	8001e38 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	f003 020f 	and.w	r2, r3, #15
 8001e1e:	4613      	mov	r3, r2
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	4413      	add	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3304      	adds	r3, #4
 8001e30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e3e:	78fb      	ldrb	r3, [r7, #3]
 8001e40:	f003 030f 	and.w	r3, r3, #15
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <HAL_PCD_EP_ClrStall+0x86>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e00e      	b.n	8001e76 <HAL_PCD_EP_ClrStall+0xa4>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68f9      	ldr	r1, [r7, #12]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f001 ffee 	bl	8003e48 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b084      	sub	sp, #16
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	460b      	mov	r3, r1
 8001e88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001e8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	da0c      	bge.n	8001eac <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e92:	78fb      	ldrb	r3, [r7, #3]
 8001e94:	f003 020f 	and.w	r2, r3, #15
 8001e98:	4613      	mov	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	3310      	adds	r3, #16
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	e00c      	b.n	8001ec6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	f003 020f 	and.w	r2, r3, #15
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68f9      	ldr	r1, [r7, #12]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f001 fe0d 	bl	8003aec <USB_EPStopXfer>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001ed6:	7afb      	ldrb	r3, [r7, #11]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	@ 0x28
 8001ee4:	af02      	add	r7, sp, #8
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4413      	add	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	3310      	adds	r3, #16
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	4413      	add	r3, r2
 8001f04:	3304      	adds	r3, #4
 8001f06:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	695a      	ldr	r2, [r3, #20]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d901      	bls.n	8001f18 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e06b      	b.n	8001ff0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	691a      	ldr	r2, [r3, #16]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	69fa      	ldr	r2, [r7, #28]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d902      	bls.n	8001f34 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	3303      	adds	r3, #3
 8001f38:	089b      	lsrs	r3, r3, #2
 8001f3a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f3c:	e02a      	b.n	8001f94 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	691a      	ldr	r2, [r3, #16]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	69fa      	ldr	r2, [r7, #28]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d902      	bls.n	8001f5a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3303      	adds	r3, #3
 8001f5e:	089b      	lsrs	r3, r3, #2
 8001f60:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	68d9      	ldr	r1, [r3, #12]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	4603      	mov	r3, r0
 8001f76:	6978      	ldr	r0, [r7, #20]
 8001f78:	f001 fe62 	bl	8003c40 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	441a      	add	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	695a      	ldr	r2, [r3, #20]
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	441a      	add	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d809      	bhi.n	8001fbe <PCD_WriteEmptyTxFifo+0xde>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	695a      	ldr	r2, [r3, #20]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d203      	bcs.n	8001fbe <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1bf      	bne.n	8001f3e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	691a      	ldr	r2, [r3, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d811      	bhi.n	8001fee <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	f003 030f 	and.w	r3, r3, #15
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	6939      	ldr	r1, [r7, #16]
 8001fe6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001fea:	4013      	ands	r3, r2
 8001fec:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3720      	adds	r7, #32
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	333c      	adds	r3, #60	@ 0x3c
 8002010:	3304      	adds	r3, #4
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	015a      	lsls	r2, r3, #5
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	4413      	add	r3, r2
 800201e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	799b      	ldrb	r3, [r3, #6]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d17b      	bne.n	8002126 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	d015      	beq.n	8002064 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	4a61      	ldr	r2, [pc, #388]	@ (80021c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	f240 80b9 	bls.w	80021b4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 80b3 	beq.w	80021b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	015a      	lsls	r2, r3, #5
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	4413      	add	r3, r2
 8002056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800205a:	461a      	mov	r2, r3
 800205c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002060:	6093      	str	r3, [r2, #8]
 8002062:	e0a7      	b.n	80021b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	f003 0320 	and.w	r3, r3, #32
 800206a:	2b00      	cmp	r3, #0
 800206c:	d009      	beq.n	8002082 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	015a      	lsls	r2, r3, #5
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	4413      	add	r3, r2
 8002076:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800207a:	461a      	mov	r2, r3
 800207c:	2320      	movs	r3, #32
 800207e:	6093      	str	r3, [r2, #8]
 8002080:	e098      	b.n	80021b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002088:	2b00      	cmp	r3, #0
 800208a:	f040 8093 	bne.w	80021b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	4a4b      	ldr	r2, [pc, #300]	@ (80021c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d90f      	bls.n	80020b6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00a      	beq.n	80020b6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	015a      	lsls	r2, r3, #5
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	4413      	add	r3, r2
 80020a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020ac:	461a      	mov	r2, r3
 80020ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020b2:	6093      	str	r3, [r2, #8]
 80020b4:	e07e      	b.n	80021b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	4613      	mov	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	4413      	add	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	4413      	add	r3, r2
 80020c8:	3304      	adds	r3, #4
 80020ca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6a1a      	ldr	r2, [r3, #32]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	0159      	lsls	r1, r3, #5
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	440b      	add	r3, r1
 80020d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e2:	1ad2      	subs	r2, r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d114      	bne.n	8002118 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d109      	bne.n	800210a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002100:	461a      	mov	r2, r3
 8002102:	2101      	movs	r1, #1
 8002104:	f002 f832 	bl	800416c <USB_EP0_OutStart>
 8002108:	e006      	b.n	8002118 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	441a      	add	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	4619      	mov	r1, r3
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f003 ffae 	bl	8006080 <HAL_PCD_DataOutStageCallback>
 8002124:	e046      	b.n	80021b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	4a26      	ldr	r2, [pc, #152]	@ (80021c4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d124      	bne.n	8002178 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00a      	beq.n	800214e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	015a      	lsls	r2, r3, #5
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	4413      	add	r3, r2
 8002140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002144:	461a      	mov	r2, r3
 8002146:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800214a:	6093      	str	r3, [r2, #8]
 800214c:	e032      	b.n	80021b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	f003 0320 	and.w	r3, r3, #32
 8002154:	2b00      	cmp	r3, #0
 8002156:	d008      	beq.n	800216a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	4413      	add	r3, r2
 8002160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002164:	461a      	mov	r2, r3
 8002166:	2320      	movs	r3, #32
 8002168:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	4619      	mov	r1, r3
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f003 ff85 	bl	8006080 <HAL_PCD_DataOutStageCallback>
 8002176:	e01d      	b.n	80021b4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d114      	bne.n	80021a8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	4613      	mov	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4413      	add	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d108      	bne.n	80021a8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80021a0:	461a      	mov	r2, r3
 80021a2:	2100      	movs	r1, #0
 80021a4:	f001 ffe2 	bl	800416c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	4619      	mov	r1, r3
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f003 ff66 	bl	8006080 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3720      	adds	r7, #32
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	4f54300a 	.word	0x4f54300a
 80021c4:	4f54310a 	.word	0x4f54310a

080021c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	333c      	adds	r3, #60	@ 0x3c
 80021e0:	3304      	adds	r3, #4
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	015a      	lsls	r2, r3, #5
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4a15      	ldr	r2, [pc, #84]	@ (8002250 <PCD_EP_OutSetupPacket_int+0x88>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d90e      	bls.n	800221c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002204:	2b00      	cmp	r3, #0
 8002206:	d009      	beq.n	800221c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	015a      	lsls	r2, r3, #5
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4413      	add	r3, r2
 8002210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002214:	461a      	mov	r2, r3
 8002216:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800221a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f003 ff1d 	bl	800605c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4a0a      	ldr	r2, [pc, #40]	@ (8002250 <PCD_EP_OutSetupPacket_int+0x88>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d90c      	bls.n	8002244 <PCD_EP_OutSetupPacket_int+0x7c>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	799b      	ldrb	r3, [r3, #6]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d108      	bne.n	8002244 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800223c:	461a      	mov	r2, r3
 800223e:	2101      	movs	r1, #1
 8002240:	f001 ff94 	bl	800416c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	4f54300a 	.word	0x4f54300a

08002254 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	70fb      	strb	r3, [r7, #3]
 8002260:	4613      	mov	r3, r2
 8002262:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800226c:	78fb      	ldrb	r3, [r7, #3]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d107      	bne.n	8002282 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002272:	883b      	ldrh	r3, [r7, #0]
 8002274:	0419      	lsls	r1, r3, #16
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	430a      	orrs	r2, r1
 800227e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002280:	e028      	b.n	80022d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002288:	0c1b      	lsrs	r3, r3, #16
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	4413      	add	r3, r2
 800228e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002290:	2300      	movs	r3, #0
 8002292:	73fb      	strb	r3, [r7, #15]
 8002294:	e00d      	b.n	80022b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	3340      	adds	r3, #64	@ 0x40
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	0c1b      	lsrs	r3, r3, #16
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	4413      	add	r3, r2
 80022aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	3301      	adds	r3, #1
 80022b0:	73fb      	strb	r3, [r7, #15]
 80022b2:	7bfa      	ldrb	r2, [r7, #15]
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d3ec      	bcc.n	8002296 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80022bc:	883b      	ldrh	r3, [r7, #0]
 80022be:	0418      	lsls	r0, r3, #16
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6819      	ldr	r1, [r3, #0]
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	4302      	orrs	r2, r0
 80022cc:	3340      	adds	r3, #64	@ 0x40
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	460b      	mov	r3, r1
 80022ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	887a      	ldrh	r2, [r7, #2]
 80022f4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e267      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d075      	beq.n	8002426 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800233a:	4b88      	ldr	r3, [pc, #544]	@ (800255c <HAL_RCC_OscConfig+0x240>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b04      	cmp	r3, #4
 8002344:	d00c      	beq.n	8002360 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002346:	4b85      	ldr	r3, [pc, #532]	@ (800255c <HAL_RCC_OscConfig+0x240>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800234e:	2b08      	cmp	r3, #8
 8002350:	d112      	bne.n	8002378 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002352:	4b82      	ldr	r3, [pc, #520]	@ (800255c <HAL_RCC_OscConfig+0x240>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800235a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800235e:	d10b      	bne.n	8002378 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002360:	4b7e      	ldr	r3, [pc, #504]	@ (800255c <HAL_RCC_OscConfig+0x240>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d05b      	beq.n	8002424 <HAL_RCC_OscConfig+0x108>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d157      	bne.n	8002424 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e242      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002380:	d106      	bne.n	8002390 <HAL_RCC_OscConfig+0x74>
 8002382:	4b76      	ldr	r3, [pc, #472]	@ (800255c <HAL_RCC_OscConfig+0x240>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a75      	ldr	r2, [pc, #468]	@ (800255c <HAL_RCC_OscConfig+0x240>)
 8002388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	e01d      	b.n	80023cc <HAL_RCC_OscConfig+0xb0>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002398:	d10c      	bne.n	80023b4 <HAL_RCC_OscConfig+0x98>
 800239a:	4b70      	ldr	r3, [pc, #448]	@ (800255c <HAL_RCC_OscConfig+0x240>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a6f      	ldr	r2, [pc, #444]	@ (800255c <HAL_RCC_OscConfig+0x240>)
 80023a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	4b6d      	ldr	r3, [pc, #436]	@ (800255c <HAL_RCC_OscConfig+0x240>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a6c      	ldr	r2, [pc, #432]	@ (800255c <HAL_RCC_OscConfig+0x240>)
 80023ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	e00b      	b.n	80023cc <HAL_RCC_OscConfig+0xb0>
 80023b4:	4b69      	ldr	r3, [pc, #420]	@ (800255c <HAL_RCC_OscConfig+0x240>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a68      	ldr	r2, [pc, #416]	@ (800255c <HAL_RCC_OscConfig+0x240>)
 80023ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023be:	6013      	str	r3, [r2, #0]
 80023c0:	4b66      	ldr	r3, [pc, #408]	@ (800255c <HAL_RCC_OscConfig+0x240>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a65      	ldr	r2, [pc, #404]	@ (800255c <HAL_RCC_OscConfig+0x240>)
 80023c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d013      	beq.n	80023fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d4:	f7fe fa8a 	bl	80008ec <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023dc:	f7fe fa86 	bl	80008ec <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b64      	cmp	r3, #100	@ 0x64
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e207      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ee:	4b5b      	ldr	r3, [pc, #364]	@ (800255c <HAL_RCC_OscConfig+0x240>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0xc0>
 80023fa:	e014      	b.n	8002426 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fc:	f7fe fa76 	bl	80008ec <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002404:	f7fe fa72 	bl	80008ec <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b64      	cmp	r3, #100	@ 0x64
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e1f3      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002416:	4b51      	ldr	r3, [pc, #324]	@ (800255c <HAL_RCC_OscConfig+0x240>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0xe8>
 8002422:	e000      	b.n	8002426 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d063      	beq.n	80024fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002432:	4b4a      	ldr	r3, [pc, #296]	@ (800255c <HAL_RCC_OscConfig+0x240>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 030c 	and.w	r3, r3, #12
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00b      	beq.n	8002456 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800243e:	4b47      	ldr	r3, [pc, #284]	@ (800255c <HAL_RCC_OscConfig+0x240>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002446:	2b08      	cmp	r3, #8
 8002448:	d11c      	bne.n	8002484 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800244a:	4b44      	ldr	r3, [pc, #272]	@ (800255c <HAL_RCC_OscConfig+0x240>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d116      	bne.n	8002484 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002456:	4b41      	ldr	r3, [pc, #260]	@ (800255c <HAL_RCC_OscConfig+0x240>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d005      	beq.n	800246e <HAL_RCC_OscConfig+0x152>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d001      	beq.n	800246e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e1c7      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800246e:	4b3b      	ldr	r3, [pc, #236]	@ (800255c <HAL_RCC_OscConfig+0x240>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4937      	ldr	r1, [pc, #220]	@ (800255c <HAL_RCC_OscConfig+0x240>)
 800247e:	4313      	orrs	r3, r2
 8002480:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002482:	e03a      	b.n	80024fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d020      	beq.n	80024ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800248c:	4b34      	ldr	r3, [pc, #208]	@ (8002560 <HAL_RCC_OscConfig+0x244>)
 800248e:	2201      	movs	r2, #1
 8002490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7fe fa2b 	bl	80008ec <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800249a:	f7fe fa27 	bl	80008ec <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e1a8      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ac:	4b2b      	ldr	r3, [pc, #172]	@ (800255c <HAL_RCC_OscConfig+0x240>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b8:	4b28      	ldr	r3, [pc, #160]	@ (800255c <HAL_RCC_OscConfig+0x240>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4925      	ldr	r1, [pc, #148]	@ (800255c <HAL_RCC_OscConfig+0x240>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	600b      	str	r3, [r1, #0]
 80024cc:	e015      	b.n	80024fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ce:	4b24      	ldr	r3, [pc, #144]	@ (8002560 <HAL_RCC_OscConfig+0x244>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d4:	f7fe fa0a 	bl	80008ec <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024dc:	f7fe fa06 	bl	80008ec <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e187      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ee:	4b1b      	ldr	r3, [pc, #108]	@ (800255c <HAL_RCC_OscConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d036      	beq.n	8002574 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d016      	beq.n	800253c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800250e:	4b15      	ldr	r3, [pc, #84]	@ (8002564 <HAL_RCC_OscConfig+0x248>)
 8002510:	2201      	movs	r2, #1
 8002512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002514:	f7fe f9ea 	bl	80008ec <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800251c:	f7fe f9e6 	bl	80008ec <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e167      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252e:	4b0b      	ldr	r3, [pc, #44]	@ (800255c <HAL_RCC_OscConfig+0x240>)
 8002530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x200>
 800253a:	e01b      	b.n	8002574 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800253c:	4b09      	ldr	r3, [pc, #36]	@ (8002564 <HAL_RCC_OscConfig+0x248>)
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002542:	f7fe f9d3 	bl	80008ec <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002548:	e00e      	b.n	8002568 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800254a:	f7fe f9cf 	bl	80008ec <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d907      	bls.n	8002568 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e150      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
 800255c:	40023800 	.word	0x40023800
 8002560:	42470000 	.word	0x42470000
 8002564:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002568:	4b88      	ldr	r3, [pc, #544]	@ (800278c <HAL_RCC_OscConfig+0x470>)
 800256a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1ea      	bne.n	800254a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 8097 	beq.w	80026b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002582:	2300      	movs	r3, #0
 8002584:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002586:	4b81      	ldr	r3, [pc, #516]	@ (800278c <HAL_RCC_OscConfig+0x470>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10f      	bne.n	80025b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	4b7d      	ldr	r3, [pc, #500]	@ (800278c <HAL_RCC_OscConfig+0x470>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259a:	4a7c      	ldr	r2, [pc, #496]	@ (800278c <HAL_RCC_OscConfig+0x470>)
 800259c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025a2:	4b7a      	ldr	r3, [pc, #488]	@ (800278c <HAL_RCC_OscConfig+0x470>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025aa:	60bb      	str	r3, [r7, #8]
 80025ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ae:	2301      	movs	r3, #1
 80025b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b2:	4b77      	ldr	r3, [pc, #476]	@ (8002790 <HAL_RCC_OscConfig+0x474>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d118      	bne.n	80025f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025be:	4b74      	ldr	r3, [pc, #464]	@ (8002790 <HAL_RCC_OscConfig+0x474>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a73      	ldr	r2, [pc, #460]	@ (8002790 <HAL_RCC_OscConfig+0x474>)
 80025c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ca:	f7fe f98f 	bl	80008ec <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d2:	f7fe f98b 	bl	80008ec <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e10c      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e4:	4b6a      	ldr	r3, [pc, #424]	@ (8002790 <HAL_RCC_OscConfig+0x474>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d106      	bne.n	8002606 <HAL_RCC_OscConfig+0x2ea>
 80025f8:	4b64      	ldr	r3, [pc, #400]	@ (800278c <HAL_RCC_OscConfig+0x470>)
 80025fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025fc:	4a63      	ldr	r2, [pc, #396]	@ (800278c <HAL_RCC_OscConfig+0x470>)
 80025fe:	f043 0301 	orr.w	r3, r3, #1
 8002602:	6713      	str	r3, [r2, #112]	@ 0x70
 8002604:	e01c      	b.n	8002640 <HAL_RCC_OscConfig+0x324>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	2b05      	cmp	r3, #5
 800260c:	d10c      	bne.n	8002628 <HAL_RCC_OscConfig+0x30c>
 800260e:	4b5f      	ldr	r3, [pc, #380]	@ (800278c <HAL_RCC_OscConfig+0x470>)
 8002610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002612:	4a5e      	ldr	r2, [pc, #376]	@ (800278c <HAL_RCC_OscConfig+0x470>)
 8002614:	f043 0304 	orr.w	r3, r3, #4
 8002618:	6713      	str	r3, [r2, #112]	@ 0x70
 800261a:	4b5c      	ldr	r3, [pc, #368]	@ (800278c <HAL_RCC_OscConfig+0x470>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800261e:	4a5b      	ldr	r2, [pc, #364]	@ (800278c <HAL_RCC_OscConfig+0x470>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6713      	str	r3, [r2, #112]	@ 0x70
 8002626:	e00b      	b.n	8002640 <HAL_RCC_OscConfig+0x324>
 8002628:	4b58      	ldr	r3, [pc, #352]	@ (800278c <HAL_RCC_OscConfig+0x470>)
 800262a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800262c:	4a57      	ldr	r2, [pc, #348]	@ (800278c <HAL_RCC_OscConfig+0x470>)
 800262e:	f023 0301 	bic.w	r3, r3, #1
 8002632:	6713      	str	r3, [r2, #112]	@ 0x70
 8002634:	4b55      	ldr	r3, [pc, #340]	@ (800278c <HAL_RCC_OscConfig+0x470>)
 8002636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002638:	4a54      	ldr	r2, [pc, #336]	@ (800278c <HAL_RCC_OscConfig+0x470>)
 800263a:	f023 0304 	bic.w	r3, r3, #4
 800263e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d015      	beq.n	8002674 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002648:	f7fe f950 	bl	80008ec <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800264e:	e00a      	b.n	8002666 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002650:	f7fe f94c 	bl	80008ec <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800265e:	4293      	cmp	r3, r2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e0cb      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002666:	4b49      	ldr	r3, [pc, #292]	@ (800278c <HAL_RCC_OscConfig+0x470>)
 8002668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0ee      	beq.n	8002650 <HAL_RCC_OscConfig+0x334>
 8002672:	e014      	b.n	800269e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002674:	f7fe f93a 	bl	80008ec <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800267a:	e00a      	b.n	8002692 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800267c:	f7fe f936 	bl	80008ec <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800268a:	4293      	cmp	r3, r2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e0b5      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002692:	4b3e      	ldr	r3, [pc, #248]	@ (800278c <HAL_RCC_OscConfig+0x470>)
 8002694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1ee      	bne.n	800267c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800269e:	7dfb      	ldrb	r3, [r7, #23]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d105      	bne.n	80026b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a4:	4b39      	ldr	r3, [pc, #228]	@ (800278c <HAL_RCC_OscConfig+0x470>)
 80026a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a8:	4a38      	ldr	r2, [pc, #224]	@ (800278c <HAL_RCC_OscConfig+0x470>)
 80026aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 80a1 	beq.w	80027fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026ba:	4b34      	ldr	r3, [pc, #208]	@ (800278c <HAL_RCC_OscConfig+0x470>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d05c      	beq.n	8002780 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d141      	bne.n	8002752 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ce:	4b31      	ldr	r3, [pc, #196]	@ (8002794 <HAL_RCC_OscConfig+0x478>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d4:	f7fe f90a 	bl	80008ec <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026dc:	f7fe f906 	bl	80008ec <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e087      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ee:	4b27      	ldr	r3, [pc, #156]	@ (800278c <HAL_RCC_OscConfig+0x470>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69da      	ldr	r2, [r3, #28]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002708:	019b      	lsls	r3, r3, #6
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002710:	085b      	lsrs	r3, r3, #1
 8002712:	3b01      	subs	r3, #1
 8002714:	041b      	lsls	r3, r3, #16
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271c:	061b      	lsls	r3, r3, #24
 800271e:	491b      	ldr	r1, [pc, #108]	@ (800278c <HAL_RCC_OscConfig+0x470>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002724:	4b1b      	ldr	r3, [pc, #108]	@ (8002794 <HAL_RCC_OscConfig+0x478>)
 8002726:	2201      	movs	r2, #1
 8002728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272a:	f7fe f8df 	bl	80008ec <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002732:	f7fe f8db 	bl	80008ec <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e05c      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002744:	4b11      	ldr	r3, [pc, #68]	@ (800278c <HAL_RCC_OscConfig+0x470>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0f0      	beq.n	8002732 <HAL_RCC_OscConfig+0x416>
 8002750:	e054      	b.n	80027fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002752:	4b10      	ldr	r3, [pc, #64]	@ (8002794 <HAL_RCC_OscConfig+0x478>)
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002758:	f7fe f8c8 	bl	80008ec <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002760:	f7fe f8c4 	bl	80008ec <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e045      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002772:	4b06      	ldr	r3, [pc, #24]	@ (800278c <HAL_RCC_OscConfig+0x470>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0x444>
 800277e:	e03d      	b.n	80027fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d107      	bne.n	8002798 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e038      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
 800278c:	40023800 	.word	0x40023800
 8002790:	40007000 	.word	0x40007000
 8002794:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002798:	4b1b      	ldr	r3, [pc, #108]	@ (8002808 <HAL_RCC_OscConfig+0x4ec>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d028      	beq.n	80027f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d121      	bne.n	80027f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027be:	429a      	cmp	r2, r3
 80027c0:	d11a      	bne.n	80027f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80027c8:	4013      	ands	r3, r2
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d111      	bne.n	80027f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027de:	085b      	lsrs	r3, r3, #1
 80027e0:	3b01      	subs	r3, #1
 80027e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d107      	bne.n	80027f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d001      	beq.n	80027fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e000      	b.n	80027fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40023800 	.word	0x40023800

0800280c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0cc      	b.n	80029ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002820:	4b68      	ldr	r3, [pc, #416]	@ (80029c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d90c      	bls.n	8002848 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282e:	4b65      	ldr	r3, [pc, #404]	@ (80029c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002836:	4b63      	ldr	r3, [pc, #396]	@ (80029c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d001      	beq.n	8002848 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e0b8      	b.n	80029ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d020      	beq.n	8002896 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002860:	4b59      	ldr	r3, [pc, #356]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	4a58      	ldr	r2, [pc, #352]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800286a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002878:	4b53      	ldr	r3, [pc, #332]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	4a52      	ldr	r2, [pc, #328]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002882:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002884:	4b50      	ldr	r3, [pc, #320]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	494d      	ldr	r1, [pc, #308]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	4313      	orrs	r3, r2
 8002894:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d044      	beq.n	800292c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d107      	bne.n	80028ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028aa:	4b47      	ldr	r3, [pc, #284]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d119      	bne.n	80028ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e07f      	b.n	80029ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d003      	beq.n	80028ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d107      	bne.n	80028da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ca:	4b3f      	ldr	r3, [pc, #252]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d109      	bne.n	80028ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e06f      	b.n	80029ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028da:	4b3b      	ldr	r3, [pc, #236]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e067      	b.n	80029ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ea:	4b37      	ldr	r3, [pc, #220]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f023 0203 	bic.w	r2, r3, #3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	4934      	ldr	r1, [pc, #208]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028fc:	f7fd fff6 	bl	80008ec <HAL_GetTick>
 8002900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002902:	e00a      	b.n	800291a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002904:	f7fd fff2 	bl	80008ec <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002912:	4293      	cmp	r3, r2
 8002914:	d901      	bls.n	800291a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e04f      	b.n	80029ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291a:	4b2b      	ldr	r3, [pc, #172]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 020c 	and.w	r2, r3, #12
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	429a      	cmp	r2, r3
 800292a:	d1eb      	bne.n	8002904 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800292c:	4b25      	ldr	r3, [pc, #148]	@ (80029c4 <HAL_RCC_ClockConfig+0x1b8>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d20c      	bcs.n	8002954 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293a:	4b22      	ldr	r3, [pc, #136]	@ (80029c4 <HAL_RCC_ClockConfig+0x1b8>)
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002942:	4b20      	ldr	r3, [pc, #128]	@ (80029c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d001      	beq.n	8002954 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e032      	b.n	80029ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002960:	4b19      	ldr	r3, [pc, #100]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4916      	ldr	r1, [pc, #88]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b00      	cmp	r3, #0
 800297c:	d009      	beq.n	8002992 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800297e:	4b12      	ldr	r3, [pc, #72]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	490e      	ldr	r1, [pc, #56]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	4313      	orrs	r3, r2
 8002990:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002992:	f000 f821 	bl	80029d8 <HAL_RCC_GetSysClockFreq>
 8002996:	4602      	mov	r2, r0
 8002998:	4b0b      	ldr	r3, [pc, #44]	@ (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	091b      	lsrs	r3, r3, #4
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	490a      	ldr	r1, [pc, #40]	@ (80029cc <HAL_RCC_ClockConfig+0x1c0>)
 80029a4:	5ccb      	ldrb	r3, [r1, r3]
 80029a6:	fa22 f303 	lsr.w	r3, r2, r3
 80029aa:	4a09      	ldr	r2, [pc, #36]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80029ae:	4b09      	ldr	r3, [pc, #36]	@ (80029d4 <HAL_RCC_ClockConfig+0x1c8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fd ff56 	bl	8000864 <HAL_InitTick>

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40023c00 	.word	0x40023c00
 80029c8:	40023800 	.word	0x40023800
 80029cc:	0800665c 	.word	0x0800665c
 80029d0:	20000000 	.word	0x20000000
 80029d4:	20000004 	.word	0x20000004

080029d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029dc:	b094      	sub	sp, #80	@ 0x50
 80029de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029f0:	4b79      	ldr	r3, [pc, #484]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 030c 	and.w	r3, r3, #12
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d00d      	beq.n	8002a18 <HAL_RCC_GetSysClockFreq+0x40>
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	f200 80e1 	bhi.w	8002bc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <HAL_RCC_GetSysClockFreq+0x34>
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d003      	beq.n	8002a12 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a0a:	e0db      	b.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a0c:	4b73      	ldr	r3, [pc, #460]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0x204>)
 8002a0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a10:	e0db      	b.n	8002bca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a12:	4b73      	ldr	r3, [pc, #460]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a16:	e0d8      	b.n	8002bca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a18:	4b6f      	ldr	r3, [pc, #444]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a20:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a22:	4b6d      	ldr	r3, [pc, #436]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d063      	beq.n	8002af6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a2e:	4b6a      	ldr	r3, [pc, #424]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	099b      	lsrs	r3, r3, #6
 8002a34:	2200      	movs	r2, #0
 8002a36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a38:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a40:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a42:	2300      	movs	r3, #0
 8002a44:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a4a:	4622      	mov	r2, r4
 8002a4c:	462b      	mov	r3, r5
 8002a4e:	f04f 0000 	mov.w	r0, #0
 8002a52:	f04f 0100 	mov.w	r1, #0
 8002a56:	0159      	lsls	r1, r3, #5
 8002a58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a5c:	0150      	lsls	r0, r2, #5
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4621      	mov	r1, r4
 8002a64:	1a51      	subs	r1, r2, r1
 8002a66:	6139      	str	r1, [r7, #16]
 8002a68:	4629      	mov	r1, r5
 8002a6a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	f04f 0200 	mov.w	r2, #0
 8002a74:	f04f 0300 	mov.w	r3, #0
 8002a78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a7c:	4659      	mov	r1, fp
 8002a7e:	018b      	lsls	r3, r1, #6
 8002a80:	4651      	mov	r1, sl
 8002a82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a86:	4651      	mov	r1, sl
 8002a88:	018a      	lsls	r2, r1, #6
 8002a8a:	4651      	mov	r1, sl
 8002a8c:	ebb2 0801 	subs.w	r8, r2, r1
 8002a90:	4659      	mov	r1, fp
 8002a92:	eb63 0901 	sbc.w	r9, r3, r1
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002aaa:	4690      	mov	r8, r2
 8002aac:	4699      	mov	r9, r3
 8002aae:	4623      	mov	r3, r4
 8002ab0:	eb18 0303 	adds.w	r3, r8, r3
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	462b      	mov	r3, r5
 8002ab8:	eb49 0303 	adc.w	r3, r9, r3
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	f04f 0300 	mov.w	r3, #0
 8002ac6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002aca:	4629      	mov	r1, r5
 8002acc:	024b      	lsls	r3, r1, #9
 8002ace:	4621      	mov	r1, r4
 8002ad0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ad4:	4621      	mov	r1, r4
 8002ad6:	024a      	lsls	r2, r1, #9
 8002ad8:	4610      	mov	r0, r2
 8002ada:	4619      	mov	r1, r3
 8002adc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ade:	2200      	movs	r2, #0
 8002ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ae2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ae4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ae8:	f7fd fb76 	bl	80001d8 <__aeabi_uldivmod>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4613      	mov	r3, r2
 8002af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002af4:	e058      	b.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af6:	4b38      	ldr	r3, [pc, #224]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	099b      	lsrs	r3, r3, #6
 8002afc:	2200      	movs	r2, #0
 8002afe:	4618      	mov	r0, r3
 8002b00:	4611      	mov	r1, r2
 8002b02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b06:	623b      	str	r3, [r7, #32]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b10:	4642      	mov	r2, r8
 8002b12:	464b      	mov	r3, r9
 8002b14:	f04f 0000 	mov.w	r0, #0
 8002b18:	f04f 0100 	mov.w	r1, #0
 8002b1c:	0159      	lsls	r1, r3, #5
 8002b1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b22:	0150      	lsls	r0, r2, #5
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4641      	mov	r1, r8
 8002b2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b2e:	4649      	mov	r1, r9
 8002b30:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b48:	ebb2 040a 	subs.w	r4, r2, sl
 8002b4c:	eb63 050b 	sbc.w	r5, r3, fp
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	00eb      	lsls	r3, r5, #3
 8002b5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b5e:	00e2      	lsls	r2, r4, #3
 8002b60:	4614      	mov	r4, r2
 8002b62:	461d      	mov	r5, r3
 8002b64:	4643      	mov	r3, r8
 8002b66:	18e3      	adds	r3, r4, r3
 8002b68:	603b      	str	r3, [r7, #0]
 8002b6a:	464b      	mov	r3, r9
 8002b6c:	eb45 0303 	adc.w	r3, r5, r3
 8002b70:	607b      	str	r3, [r7, #4]
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	f04f 0300 	mov.w	r3, #0
 8002b7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b7e:	4629      	mov	r1, r5
 8002b80:	028b      	lsls	r3, r1, #10
 8002b82:	4621      	mov	r1, r4
 8002b84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b88:	4621      	mov	r1, r4
 8002b8a:	028a      	lsls	r2, r1, #10
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	4619      	mov	r1, r3
 8002b90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b92:	2200      	movs	r2, #0
 8002b94:	61bb      	str	r3, [r7, #24]
 8002b96:	61fa      	str	r2, [r7, #28]
 8002b98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b9c:	f7fd fb1c 	bl	80001d8 <__aeabi_uldivmod>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	0c1b      	lsrs	r3, r3, #16
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002bb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bc2:	e002      	b.n	8002bca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bc4:	4b05      	ldr	r3, [pc, #20]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0x204>)
 8002bc6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3750      	adds	r7, #80	@ 0x50
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	00f42400 	.word	0x00f42400
 8002be0:	007a1200 	.word	0x007a1200

08002be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002be8:	4b03      	ldr	r3, [pc, #12]	@ (8002bf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bea:	681b      	ldr	r3, [r3, #0]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000000 	.word	0x20000000

08002bfc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002bfc:	b084      	sub	sp, #16
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	f107 001c 	add.w	r0, r7, #28
 8002c0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002c0e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d123      	bne.n	8002c5e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c1a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002c2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002c3e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d105      	bne.n	8002c52 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f001 fae8 	bl	8004228 <USB_CoreReset>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	73fb      	strb	r3, [r7, #15]
 8002c5c:	e01b      	b.n	8002c96 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f001 fadc 	bl	8004228 <USB_CoreReset>
 8002c70:	4603      	mov	r3, r0
 8002c72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002c74:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d106      	bne.n	8002c8a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c80:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c88:	e005      	b.n	8002c96 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c8e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002c96:	7fbb      	ldrb	r3, [r7, #30]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d10b      	bne.n	8002cb4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f043 0206 	orr.w	r2, r3, #6
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f043 0220 	orr.w	r2, r3, #32
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002cc0:	b004      	add	sp, #16
 8002cc2:	4770      	bx	lr

08002cc4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d165      	bne.n	8002da4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4a41      	ldr	r2, [pc, #260]	@ (8002de0 <USB_SetTurnaroundTime+0x11c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d906      	bls.n	8002cee <USB_SetTurnaroundTime+0x2a>
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	4a40      	ldr	r2, [pc, #256]	@ (8002de4 <USB_SetTurnaroundTime+0x120>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d202      	bcs.n	8002cee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002ce8:	230f      	movs	r3, #15
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	e062      	b.n	8002db4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	4a3c      	ldr	r2, [pc, #240]	@ (8002de4 <USB_SetTurnaroundTime+0x120>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d306      	bcc.n	8002d04 <USB_SetTurnaroundTime+0x40>
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	4a3b      	ldr	r2, [pc, #236]	@ (8002de8 <USB_SetTurnaroundTime+0x124>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d202      	bcs.n	8002d04 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002cfe:	230e      	movs	r3, #14
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	e057      	b.n	8002db4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4a38      	ldr	r2, [pc, #224]	@ (8002de8 <USB_SetTurnaroundTime+0x124>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d306      	bcc.n	8002d1a <USB_SetTurnaroundTime+0x56>
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	4a37      	ldr	r2, [pc, #220]	@ (8002dec <USB_SetTurnaroundTime+0x128>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d202      	bcs.n	8002d1a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002d14:	230d      	movs	r3, #13
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	e04c      	b.n	8002db4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	4a33      	ldr	r2, [pc, #204]	@ (8002dec <USB_SetTurnaroundTime+0x128>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d306      	bcc.n	8002d30 <USB_SetTurnaroundTime+0x6c>
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	4a32      	ldr	r2, [pc, #200]	@ (8002df0 <USB_SetTurnaroundTime+0x12c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d802      	bhi.n	8002d30 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002d2a:	230c      	movs	r3, #12
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	e041      	b.n	8002db4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4a2f      	ldr	r2, [pc, #188]	@ (8002df0 <USB_SetTurnaroundTime+0x12c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d906      	bls.n	8002d46 <USB_SetTurnaroundTime+0x82>
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	4a2e      	ldr	r2, [pc, #184]	@ (8002df4 <USB_SetTurnaroundTime+0x130>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d802      	bhi.n	8002d46 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002d40:	230b      	movs	r3, #11
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	e036      	b.n	8002db4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	4a2a      	ldr	r2, [pc, #168]	@ (8002df4 <USB_SetTurnaroundTime+0x130>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d906      	bls.n	8002d5c <USB_SetTurnaroundTime+0x98>
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	4a29      	ldr	r2, [pc, #164]	@ (8002df8 <USB_SetTurnaroundTime+0x134>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d802      	bhi.n	8002d5c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002d56:	230a      	movs	r3, #10
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	e02b      	b.n	8002db4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	4a26      	ldr	r2, [pc, #152]	@ (8002df8 <USB_SetTurnaroundTime+0x134>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d906      	bls.n	8002d72 <USB_SetTurnaroundTime+0xae>
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	4a25      	ldr	r2, [pc, #148]	@ (8002dfc <USB_SetTurnaroundTime+0x138>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d202      	bcs.n	8002d72 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002d6c:	2309      	movs	r3, #9
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	e020      	b.n	8002db4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	4a21      	ldr	r2, [pc, #132]	@ (8002dfc <USB_SetTurnaroundTime+0x138>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d306      	bcc.n	8002d88 <USB_SetTurnaroundTime+0xc4>
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	4a20      	ldr	r2, [pc, #128]	@ (8002e00 <USB_SetTurnaroundTime+0x13c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d802      	bhi.n	8002d88 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002d82:	2308      	movs	r3, #8
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	e015      	b.n	8002db4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4a1d      	ldr	r2, [pc, #116]	@ (8002e00 <USB_SetTurnaroundTime+0x13c>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d906      	bls.n	8002d9e <USB_SetTurnaroundTime+0xda>
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4a1c      	ldr	r2, [pc, #112]	@ (8002e04 <USB_SetTurnaroundTime+0x140>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d202      	bcs.n	8002d9e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002d98:	2307      	movs	r3, #7
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	e00a      	b.n	8002db4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002d9e:	2306      	movs	r3, #6
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	e007      	b.n	8002db4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d102      	bne.n	8002db0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002daa:	2309      	movs	r3, #9
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	e001      	b.n	8002db4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002db0:	2309      	movs	r3, #9
 8002db2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	029b      	lsls	r3, r3, #10
 8002dc8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	371c      	adds	r7, #28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	00d8acbf 	.word	0x00d8acbf
 8002de4:	00e4e1c0 	.word	0x00e4e1c0
 8002de8:	00f42400 	.word	0x00f42400
 8002dec:	01067380 	.word	0x01067380
 8002df0:	011a499f 	.word	0x011a499f
 8002df4:	01312cff 	.word	0x01312cff
 8002df8:	014ca43f 	.word	0x014ca43f
 8002dfc:	016e3600 	.word	0x016e3600
 8002e00:	01a6ab1f 	.word	0x01a6ab1f
 8002e04:	01e84800 	.word	0x01e84800

08002e08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f043 0201 	orr.w	r2, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f023 0201 	bic.w	r2, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002e68:	78fb      	ldrb	r3, [r7, #3]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d115      	bne.n	8002e9a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002e7a:	200a      	movs	r0, #10
 8002e7c:	f7fd fd42 	bl	8000904 <HAL_Delay>
      ms += 10U;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	330a      	adds	r3, #10
 8002e84:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f001 f93f 	bl	800410a <USB_GetMode>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d01e      	beq.n	8002ed0 <USB_SetCurrentMode+0x84>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2bc7      	cmp	r3, #199	@ 0xc7
 8002e96:	d9f0      	bls.n	8002e7a <USB_SetCurrentMode+0x2e>
 8002e98:	e01a      	b.n	8002ed0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002e9a:	78fb      	ldrb	r3, [r7, #3]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d115      	bne.n	8002ecc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002eac:	200a      	movs	r0, #10
 8002eae:	f7fd fd29 	bl	8000904 <HAL_Delay>
      ms += 10U;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	330a      	adds	r3, #10
 8002eb6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f001 f926 	bl	800410a <USB_GetMode>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <USB_SetCurrentMode+0x84>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2bc7      	cmp	r3, #199	@ 0xc7
 8002ec8:	d9f0      	bls.n	8002eac <USB_SetCurrentMode+0x60>
 8002eca:	e001      	b.n	8002ed0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e005      	b.n	8002edc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2bc8      	cmp	r3, #200	@ 0xc8
 8002ed4:	d101      	bne.n	8002eda <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ee4:	b084      	sub	sp, #16
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b086      	sub	sp, #24
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002ef2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	e009      	b.n	8002f18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	3340      	adds	r3, #64	@ 0x40
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	2200      	movs	r2, #0
 8002f10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	3301      	adds	r3, #1
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	2b0e      	cmp	r3, #14
 8002f1c:	d9f2      	bls.n	8002f04 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002f1e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d11c      	bne.n	8002f60 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f34:	f043 0302 	orr.w	r3, r3, #2
 8002f38:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f3e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f4a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f56:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	639a      	str	r2, [r3, #56]	@ 0x38
 8002f5e:	e00b      	b.n	8002f78 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f64:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f70:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002f7e:	461a      	mov	r2, r3
 8002f80:	2300      	movs	r3, #0
 8002f82:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f84:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d10d      	bne.n	8002fa8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d104      	bne.n	8002f9e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002f94:	2100      	movs	r1, #0
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f968 	bl	800326c <USB_SetDevSpeed>
 8002f9c:	e008      	b.n	8002fb0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f963 	bl	800326c <USB_SetDevSpeed>
 8002fa6:	e003      	b.n	8002fb0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002fa8:	2103      	movs	r1, #3
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f95e 	bl	800326c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002fb0:	2110      	movs	r1, #16
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f8fa 	bl	80031ac <USB_FlushTxFifo>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f924 	bl	8003210 <USB_FlushRxFifo>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fd8:	461a      	mov	r2, r3
 8002fda:	2300      	movs	r3, #0
 8002fdc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	e043      	b.n	8003084 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4413      	add	r3, r2
 8003004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800300e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003012:	d118      	bne.n	8003046 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10a      	bne.n	8003030 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4413      	add	r3, r2
 8003022:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003026:	461a      	mov	r2, r3
 8003028:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	e013      	b.n	8003058 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4413      	add	r3, r2
 8003038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800303c:	461a      	mov	r2, r3
 800303e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	e008      	b.n	8003058 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	015a      	lsls	r2, r3, #5
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4413      	add	r3, r2
 800304e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003052:	461a      	mov	r2, r3
 8003054:	2300      	movs	r3, #0
 8003056:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	015a      	lsls	r2, r3, #5
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4413      	add	r3, r2
 8003060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003064:	461a      	mov	r2, r3
 8003066:	2300      	movs	r3, #0
 8003068:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4413      	add	r3, r2
 8003072:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003076:	461a      	mov	r2, r3
 8003078:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800307c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	3301      	adds	r3, #1
 8003082:	613b      	str	r3, [r7, #16]
 8003084:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003088:	461a      	mov	r2, r3
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4293      	cmp	r3, r2
 800308e:	d3b5      	bcc.n	8002ffc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003090:	2300      	movs	r3, #0
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	e043      	b.n	800311e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	015a      	lsls	r2, r3, #5
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4413      	add	r3, r2
 800309e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80030a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030ac:	d118      	bne.n	80030e0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10a      	bne.n	80030ca <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030c0:	461a      	mov	r2, r3
 80030c2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	e013      	b.n	80030f2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030d6:	461a      	mov	r2, r3
 80030d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e008      	b.n	80030f2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030ec:	461a      	mov	r2, r3
 80030ee:	2300      	movs	r3, #0
 80030f0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030fe:	461a      	mov	r2, r3
 8003100:	2300      	movs	r3, #0
 8003102:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	015a      	lsls	r2, r3, #5
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4413      	add	r3, r2
 800310c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003110:	461a      	mov	r2, r3
 8003112:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003116:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	3301      	adds	r3, #1
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003122:	461a      	mov	r2, r3
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	4293      	cmp	r3, r2
 8003128:	d3b5      	bcc.n	8003096 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003138:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800313c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800314a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800314c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003150:	2b00      	cmp	r3, #0
 8003152:	d105      	bne.n	8003160 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	f043 0210 	orr.w	r2, r3, #16
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699a      	ldr	r2, [r3, #24]
 8003164:	4b10      	ldr	r3, [pc, #64]	@ (80031a8 <USB_DevInit+0x2c4>)
 8003166:	4313      	orrs	r3, r2
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800316c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	f043 0208 	orr.w	r2, r3, #8
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003180:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003184:	2b01      	cmp	r3, #1
 8003186:	d107      	bne.n	8003198 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003190:	f043 0304 	orr.w	r3, r3, #4
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003198:	7dfb      	ldrb	r3, [r7, #23]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031a4:	b004      	add	sp, #16
 80031a6:	4770      	bx	lr
 80031a8:	803c3800 	.word	0x803c3800

080031ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	3301      	adds	r3, #1
 80031be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80031c6:	d901      	bls.n	80031cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e01b      	b.n	8003204 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	daf2      	bge.n	80031ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	019b      	lsls	r3, r3, #6
 80031dc:	f043 0220 	orr.w	r2, r3, #32
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	3301      	adds	r3, #1
 80031e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80031f0:	d901      	bls.n	80031f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e006      	b.n	8003204 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f003 0320 	and.w	r3, r3, #32
 80031fe:	2b20      	cmp	r3, #32
 8003200:	d0f0      	beq.n	80031e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	3301      	adds	r3, #1
 8003220:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003228:	d901      	bls.n	800322e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e018      	b.n	8003260 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	daf2      	bge.n	800321c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2210      	movs	r2, #16
 800323e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	3301      	adds	r3, #1
 8003244:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800324c:	d901      	bls.n	8003252 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e006      	b.n	8003260 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	f003 0310 	and.w	r3, r3, #16
 800325a:	2b10      	cmp	r3, #16
 800325c:	d0f0      	beq.n	8003240 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	460b      	mov	r3, r1
 8003276:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	68f9      	ldr	r1, [r7, #12]
 8003288:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800328c:	4313      	orrs	r3, r2
 800328e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800329e:	b480      	push	{r7}
 80032a0:	b087      	sub	sp, #28
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 0306 	and.w	r3, r3, #6
 80032b6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d102      	bne.n	80032c4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80032be:	2300      	movs	r3, #0
 80032c0:	75fb      	strb	r3, [r7, #23]
 80032c2:	e00a      	b.n	80032da <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d002      	beq.n	80032d0 <USB_GetDevSpeed+0x32>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2b06      	cmp	r3, #6
 80032ce:	d102      	bne.n	80032d6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80032d0:	2302      	movs	r3, #2
 80032d2:	75fb      	strb	r3, [r7, #23]
 80032d4:	e001      	b.n	80032da <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80032d6:	230f      	movs	r3, #15
 80032d8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80032da:	7dfb      	ldrb	r3, [r7, #23]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	371c      	adds	r7, #28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	785b      	ldrb	r3, [r3, #1]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d13a      	bne.n	800337a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800330a:	69da      	ldr	r2, [r3, #28]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	f003 030f 	and.w	r3, r3, #15
 8003314:	2101      	movs	r1, #1
 8003316:	fa01 f303 	lsl.w	r3, r1, r3
 800331a:	b29b      	uxth	r3, r3
 800331c:	68f9      	ldr	r1, [r7, #12]
 800331e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003322:	4313      	orrs	r3, r2
 8003324:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	015a      	lsls	r2, r3, #5
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4413      	add	r3, r2
 800332e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d155      	bne.n	80033e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4413      	add	r3, r2
 8003344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	791b      	ldrb	r3, [r3, #4]
 8003356:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003358:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	059b      	lsls	r3, r3, #22
 800335e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003360:	4313      	orrs	r3, r2
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	0151      	lsls	r1, r2, #5
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	440a      	add	r2, r1
 800336a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800336e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003372:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	e036      	b.n	80033e8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003380:	69da      	ldr	r2, [r3, #28]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	2101      	movs	r1, #1
 800338c:	fa01 f303 	lsl.w	r3, r1, r3
 8003390:	041b      	lsls	r3, r3, #16
 8003392:	68f9      	ldr	r1, [r7, #12]
 8003394:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003398:	4313      	orrs	r3, r2
 800339a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d11a      	bne.n	80033e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	015a      	lsls	r2, r3, #5
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	791b      	ldrb	r3, [r3, #4]
 80033cc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80033ce:	430b      	orrs	r3, r1
 80033d0:	4313      	orrs	r3, r2
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	0151      	lsls	r1, r2, #5
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	440a      	add	r2, r1
 80033da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80033de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033e6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
	...

080033f8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	785b      	ldrb	r3, [r3, #1]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d161      	bne.n	80034d8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4413      	add	r3, r2
 800341c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003426:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800342a:	d11f      	bne.n	800346c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	015a      	lsls	r2, r3, #5
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4413      	add	r3, r2
 8003434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	0151      	lsls	r1, r2, #5
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	440a      	add	r2, r1
 8003442:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003446:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800344a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	015a      	lsls	r2, r3, #5
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4413      	add	r3, r2
 8003454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	0151      	lsls	r1, r2, #5
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	440a      	add	r2, r1
 8003462:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003466:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800346a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003472:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	f003 030f 	and.w	r3, r3, #15
 800347c:	2101      	movs	r1, #1
 800347e:	fa01 f303 	lsl.w	r3, r1, r3
 8003482:	b29b      	uxth	r3, r3
 8003484:	43db      	mvns	r3, r3
 8003486:	68f9      	ldr	r1, [r7, #12]
 8003488:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800348c:	4013      	ands	r3, r2
 800348e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003496:	69da      	ldr	r2, [r3, #28]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	2101      	movs	r1, #1
 80034a2:	fa01 f303 	lsl.w	r3, r1, r3
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	68f9      	ldr	r1, [r7, #12]
 80034ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034b0:	4013      	ands	r3, r2
 80034b2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	0159      	lsls	r1, r3, #5
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	440b      	add	r3, r1
 80034ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034ce:	4619      	mov	r1, r3
 80034d0:	4b35      	ldr	r3, [pc, #212]	@ (80035a8 <USB_DeactivateEndpoint+0x1b0>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	600b      	str	r3, [r1, #0]
 80034d6:	e060      	b.n	800359a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	015a      	lsls	r2, r3, #5
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4413      	add	r3, r2
 80034e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80034ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034ee:	d11f      	bne.n	8003530 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	0151      	lsls	r1, r2, #5
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	440a      	add	r2, r1
 8003506:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800350a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800350e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	015a      	lsls	r2, r3, #5
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4413      	add	r3, r2
 8003518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	0151      	lsls	r1, r2, #5
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	440a      	add	r2, r1
 8003526:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800352a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800352e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003536:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	f003 030f 	and.w	r3, r3, #15
 8003540:	2101      	movs	r1, #1
 8003542:	fa01 f303 	lsl.w	r3, r1, r3
 8003546:	041b      	lsls	r3, r3, #16
 8003548:	43db      	mvns	r3, r3
 800354a:	68f9      	ldr	r1, [r7, #12]
 800354c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003550:	4013      	ands	r3, r2
 8003552:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800355a:	69da      	ldr	r2, [r3, #28]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	2101      	movs	r1, #1
 8003566:	fa01 f303 	lsl.w	r3, r1, r3
 800356a:	041b      	lsls	r3, r3, #16
 800356c:	43db      	mvns	r3, r3
 800356e:	68f9      	ldr	r1, [r7, #12]
 8003570:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003574:	4013      	ands	r3, r2
 8003576:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4413      	add	r3, r2
 8003580:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	0159      	lsls	r1, r3, #5
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	440b      	add	r3, r1
 800358e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003592:	4619      	mov	r1, r3
 8003594:	4b05      	ldr	r3, [pc, #20]	@ (80035ac <USB_DeactivateEndpoint+0x1b4>)
 8003596:	4013      	ands	r3, r2
 8003598:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	ec337800 	.word	0xec337800
 80035ac:	eff37800 	.word	0xeff37800

080035b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08a      	sub	sp, #40	@ 0x28
 80035b4:	af02      	add	r7, sp, #8
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	4613      	mov	r3, r2
 80035bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	785b      	ldrb	r3, [r3, #1]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	f040 817f 	bne.w	80038d0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d132      	bne.n	8003640 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	015a      	lsls	r2, r3, #5
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	4413      	add	r3, r2
 80035e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	0151      	lsls	r1, r2, #5
 80035ec:	69fa      	ldr	r2, [r7, #28]
 80035ee:	440a      	add	r2, r1
 80035f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035f4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80035f8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80035fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	4413      	add	r3, r2
 8003606:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	0151      	lsls	r1, r2, #5
 8003610:	69fa      	ldr	r2, [r7, #28]
 8003612:	440a      	add	r2, r1
 8003614:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003618:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800361c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	4413      	add	r3, r2
 8003626:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	0151      	lsls	r1, r2, #5
 8003630:	69fa      	ldr	r2, [r7, #28]
 8003632:	440a      	add	r2, r1
 8003634:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003638:	0cdb      	lsrs	r3, r3, #19
 800363a:	04db      	lsls	r3, r3, #19
 800363c:	6113      	str	r3, [r2, #16]
 800363e:	e097      	b.n	8003770 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	015a      	lsls	r2, r3, #5
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	4413      	add	r3, r2
 8003648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	0151      	lsls	r1, r2, #5
 8003652:	69fa      	ldr	r2, [r7, #28]
 8003654:	440a      	add	r2, r1
 8003656:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800365a:	0cdb      	lsrs	r3, r3, #19
 800365c:	04db      	lsls	r3, r3, #19
 800365e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	015a      	lsls	r2, r3, #5
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	4413      	add	r3, r2
 8003668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	0151      	lsls	r1, r2, #5
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	440a      	add	r2, r1
 8003676:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800367a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800367e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003682:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d11a      	bne.n	80036c0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	691a      	ldr	r2, [r3, #16]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	429a      	cmp	r2, r3
 8003694:	d903      	bls.n	800369e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	0151      	lsls	r1, r2, #5
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	440a      	add	r2, r1
 80036b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80036bc:	6113      	str	r3, [r2, #16]
 80036be:	e044      	b.n	800374a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	4413      	add	r3, r2
 80036ca:	1e5a      	subs	r2, r3, #1
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	8afb      	ldrh	r3, [r7, #22]
 80036e6:	04d9      	lsls	r1, r3, #19
 80036e8:	4ba4      	ldr	r3, [pc, #656]	@ (800397c <USB_EPStartXfer+0x3cc>)
 80036ea:	400b      	ands	r3, r1
 80036ec:	69b9      	ldr	r1, [r7, #24]
 80036ee:	0148      	lsls	r0, r1, #5
 80036f0:	69f9      	ldr	r1, [r7, #28]
 80036f2:	4401      	add	r1, r0
 80036f4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80036f8:	4313      	orrs	r3, r2
 80036fa:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	791b      	ldrb	r3, [r3, #4]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d122      	bne.n	800374a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	0151      	lsls	r1, r2, #5
 8003716:	69fa      	ldr	r2, [r7, #28]
 8003718:	440a      	add	r2, r1
 800371a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800371e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003722:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	4413      	add	r3, r2
 800372c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	8afb      	ldrh	r3, [r7, #22]
 8003734:	075b      	lsls	r3, r3, #29
 8003736:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800373a:	69b9      	ldr	r1, [r7, #24]
 800373c:	0148      	lsls	r0, r1, #5
 800373e:	69f9      	ldr	r1, [r7, #28]
 8003740:	4401      	add	r1, r0
 8003742:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003746:	4313      	orrs	r3, r2
 8003748:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	015a      	lsls	r2, r3, #5
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	4413      	add	r3, r2
 8003752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003760:	69b9      	ldr	r1, [r7, #24]
 8003762:	0148      	lsls	r0, r1, #5
 8003764:	69f9      	ldr	r1, [r7, #28]
 8003766:	4401      	add	r1, r0
 8003768:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800376c:	4313      	orrs	r3, r2
 800376e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d14b      	bne.n	800380e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d009      	beq.n	8003792 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	015a      	lsls	r2, r3, #5
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	4413      	add	r3, r2
 8003786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800378a:	461a      	mov	r2, r3
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	791b      	ldrb	r3, [r3, #4]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d128      	bne.n	80037ec <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d110      	bne.n	80037cc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	0151      	lsls	r1, r2, #5
 80037bc:	69fa      	ldr	r2, [r7, #28]
 80037be:	440a      	add	r2, r1
 80037c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	e00f      	b.n	80037ec <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	0151      	lsls	r1, r2, #5
 80037de:	69fa      	ldr	r2, [r7, #28]
 80037e0:	440a      	add	r2, r1
 80037e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037ea:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	0151      	lsls	r1, r2, #5
 80037fe:	69fa      	ldr	r2, [r7, #28]
 8003800:	440a      	add	r2, r1
 8003802:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003806:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	e166      	b.n	8003adc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	015a      	lsls	r2, r3, #5
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	4413      	add	r3, r2
 8003816:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	0151      	lsls	r1, r2, #5
 8003820:	69fa      	ldr	r2, [r7, #28]
 8003822:	440a      	add	r2, r1
 8003824:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003828:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800382c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	791b      	ldrb	r3, [r3, #4]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d015      	beq.n	8003862 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 814e 	beq.w	8003adc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003846:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	2101      	movs	r1, #1
 8003852:	fa01 f303 	lsl.w	r3, r1, r3
 8003856:	69f9      	ldr	r1, [r7, #28]
 8003858:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800385c:	4313      	orrs	r3, r2
 800385e:	634b      	str	r3, [r1, #52]	@ 0x34
 8003860:	e13c      	b.n	8003adc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800386e:	2b00      	cmp	r3, #0
 8003870:	d110      	bne.n	8003894 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	4413      	add	r3, r2
 800387a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	0151      	lsls	r1, r2, #5
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	440a      	add	r2, r1
 8003888:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800388c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	e00f      	b.n	80038b4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	4413      	add	r3, r2
 800389c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	0151      	lsls	r1, r2, #5
 80038a6:	69fa      	ldr	r2, [r7, #28]
 80038a8:	440a      	add	r2, r1
 80038aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038b2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	68d9      	ldr	r1, [r3, #12]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	781a      	ldrb	r2, [r3, #0]
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	b298      	uxth	r0, r3
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	4603      	mov	r3, r0
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 f9b9 	bl	8003c40 <USB_WritePacket>
 80038ce:	e105      	b.n	8003adc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	0151      	lsls	r1, r2, #5
 80038e2:	69fa      	ldr	r2, [r7, #28]
 80038e4:	440a      	add	r2, r1
 80038e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80038ea:	0cdb      	lsrs	r3, r3, #19
 80038ec:	04db      	lsls	r3, r3, #19
 80038ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	0151      	lsls	r1, r2, #5
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	440a      	add	r2, r1
 8003906:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800390a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800390e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003912:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d132      	bne.n	8003980 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	4413      	add	r3, r2
 800393a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003948:	69b9      	ldr	r1, [r7, #24]
 800394a:	0148      	lsls	r0, r1, #5
 800394c:	69f9      	ldr	r1, [r7, #28]
 800394e:	4401      	add	r1, r0
 8003950:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003954:	4313      	orrs	r3, r2
 8003956:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	4413      	add	r3, r2
 8003960:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	0151      	lsls	r1, r2, #5
 800396a:	69fa      	ldr	r2, [r7, #28]
 800396c:	440a      	add	r2, r1
 800396e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003972:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003976:	6113      	str	r3, [r2, #16]
 8003978:	e062      	b.n	8003a40 <USB_EPStartXfer+0x490>
 800397a:	bf00      	nop
 800397c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d123      	bne.n	80039d0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800399e:	69b9      	ldr	r1, [r7, #24]
 80039a0:	0148      	lsls	r0, r1, #5
 80039a2:	69f9      	ldr	r1, [r7, #28]
 80039a4:	4401      	add	r1, r0
 80039a6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80039aa:	4313      	orrs	r3, r2
 80039ac:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	0151      	lsls	r1, r2, #5
 80039c0:	69fa      	ldr	r2, [r7, #28]
 80039c2:	440a      	add	r2, r1
 80039c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80039c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80039cc:	6113      	str	r3, [r2, #16]
 80039ce:	e037      	b.n	8003a40 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	4413      	add	r3, r2
 80039da:	1e5a      	subs	r2, r3, #1
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	8afa      	ldrh	r2, [r7, #22]
 80039ec:	fb03 f202 	mul.w	r2, r3, r2
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	8afb      	ldrh	r3, [r7, #22]
 8003a04:	04d9      	lsls	r1, r3, #19
 8003a06:	4b38      	ldr	r3, [pc, #224]	@ (8003ae8 <USB_EPStartXfer+0x538>)
 8003a08:	400b      	ands	r3, r1
 8003a0a:	69b9      	ldr	r1, [r7, #24]
 8003a0c:	0148      	lsls	r0, r1, #5
 8003a0e:	69f9      	ldr	r1, [r7, #28]
 8003a10:	4401      	add	r1, r0
 8003a12:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003a16:	4313      	orrs	r3, r2
 8003a18:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	015a      	lsls	r2, r3, #5
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	4413      	add	r3, r2
 8003a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a30:	69b9      	ldr	r1, [r7, #24]
 8003a32:	0148      	lsls	r0, r1, #5
 8003a34:	69f9      	ldr	r1, [r7, #28]
 8003a36:	4401      	add	r1, r0
 8003a38:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003a40:	79fb      	ldrb	r3, [r7, #7]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d10d      	bne.n	8003a62 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d009      	beq.n	8003a62 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	68d9      	ldr	r1, [r3, #12]
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a5e:	460a      	mov	r2, r1
 8003a60:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	791b      	ldrb	r3, [r3, #4]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d128      	bne.n	8003abc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d110      	bne.n	8003a9c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	015a      	lsls	r2, r3, #5
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	0151      	lsls	r1, r2, #5
 8003a8c:	69fa      	ldr	r2, [r7, #28]
 8003a8e:	440a      	add	r2, r1
 8003a90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a94:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	e00f      	b.n	8003abc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	0151      	lsls	r1, r2, #5
 8003aae:	69fa      	ldr	r2, [r7, #28]
 8003ab0:	440a      	add	r2, r1
 8003ab2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ab6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	0151      	lsls	r1, r2, #5
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	440a      	add	r2, r1
 8003ad2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ad6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003ada:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3720      	adds	r7, #32
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	1ff80000 	.word	0x1ff80000

08003aec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	785b      	ldrb	r3, [r3, #1]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d14a      	bne.n	8003ba0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b22:	f040 8086 	bne.w	8003c32 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	7812      	ldrb	r2, [r2, #0]
 8003b3a:	0151      	lsls	r1, r2, #5
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	440a      	add	r2, r1
 8003b40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b44:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003b48:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	7812      	ldrb	r2, [r2, #0]
 8003b5e:	0151      	lsls	r1, r2, #5
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	440a      	add	r2, r1
 8003b64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b6c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	3301      	adds	r3, #1
 8003b72:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d902      	bls.n	8003b84 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	75fb      	strb	r3, [r7, #23]
          break;
 8003b82:	e056      	b.n	8003c32 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b9c:	d0e7      	beq.n	8003b6e <USB_EPStopXfer+0x82>
 8003b9e:	e048      	b.n	8003c32 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	015a      	lsls	r2, r3, #5
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003bb8:	d13b      	bne.n	8003c32 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	7812      	ldrb	r2, [r2, #0]
 8003bce:	0151      	lsls	r1, r2, #5
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	440a      	add	r2, r1
 8003bd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003bd8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003bdc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	7812      	ldrb	r2, [r2, #0]
 8003bf2:	0151      	lsls	r1, r2, #5
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	440a      	add	r2, r1
 8003bf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003bfc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c00:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3301      	adds	r3, #1
 8003c06:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d902      	bls.n	8003c18 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	75fb      	strb	r3, [r7, #23]
          break;
 8003c16:	e00c      	b.n	8003c32 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c30:	d0e7      	beq.n	8003c02 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	371c      	adds	r7, #28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b089      	sub	sp, #36	@ 0x24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	460b      	mov	r3, r1
 8003c50:	71fb      	strb	r3, [r7, #7]
 8003c52:	4613      	mov	r3, r2
 8003c54:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003c5e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d123      	bne.n	8003cae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003c66:	88bb      	ldrh	r3, [r7, #4]
 8003c68:	3303      	adds	r3, #3
 8003c6a:	089b      	lsrs	r3, r3, #2
 8003c6c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61bb      	str	r3, [r7, #24]
 8003c72:	e018      	b.n	8003ca6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003c74:	79fb      	ldrb	r3, [r7, #7]
 8003c76:	031a      	lsls	r2, r3, #12
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c80:	461a      	mov	r2, r3
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	3301      	adds	r3, #1
 8003c92:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	3301      	adds	r3, #1
 8003c98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	61bb      	str	r3, [r7, #24]
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d3e2      	bcc.n	8003c74 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3724      	adds	r7, #36	@ 0x24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b08b      	sub	sp, #44	@ 0x2c
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003cd2:	88fb      	ldrh	r3, [r7, #6]
 8003cd4:	089b      	lsrs	r3, r3, #2
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003cda:	88fb      	ldrh	r3, [r7, #6]
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	623b      	str	r3, [r7, #32]
 8003ce6:	e014      	b.n	8003d12 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf2:	601a      	str	r2, [r3, #0]
    pDest++;
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d02:	3301      	adds	r3, #1
 8003d04:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d08:	3301      	adds	r3, #1
 8003d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	623b      	str	r3, [r7, #32]
 8003d12:	6a3a      	ldr	r2, [r7, #32]
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d3e6      	bcc.n	8003ce8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003d1a:	8bfb      	ldrh	r3, [r7, #30]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d01e      	beq.n	8003d5e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f107 0310 	add.w	r3, r7, #16
 8003d30:	6812      	ldr	r2, [r2, #0]
 8003d32:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d44:	701a      	strb	r2, [r3, #0]
      i++;
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	623b      	str	r3, [r7, #32]
      pDest++;
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4e:	3301      	adds	r3, #1
 8003d50:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003d52:	8bfb      	ldrh	r3, [r7, #30]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003d58:	8bfb      	ldrh	r3, [r7, #30]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1ea      	bne.n	8003d34 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	372c      	adds	r7, #44	@ 0x2c
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	785b      	ldrb	r3, [r3, #1]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d12c      	bne.n	8003de2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	db12      	blt.n	8003dc0 <USB_EPSetStall+0x54>
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00f      	beq.n	8003dc0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	0151      	lsls	r1, r2, #5
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	440a      	add	r2, r1
 8003db6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003dba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003dbe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	0151      	lsls	r1, r2, #5
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	440a      	add	r2, r1
 8003dd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003dda:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	e02b      	b.n	8003e3a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	015a      	lsls	r2, r3, #5
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	db12      	blt.n	8003e1a <USB_EPSetStall+0xae>
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00f      	beq.n	8003e1a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	015a      	lsls	r2, r3, #5
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4413      	add	r3, r2
 8003e02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	0151      	lsls	r1, r2, #5
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	440a      	add	r2, r1
 8003e10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e14:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e18:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	0151      	lsls	r1, r2, #5
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	440a      	add	r2, r1
 8003e30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e38:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	785b      	ldrb	r3, [r3, #1]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d128      	bne.n	8003eb6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	0151      	lsls	r1, r2, #5
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	440a      	add	r2, r1
 8003e7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003e82:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	791b      	ldrb	r3, [r3, #4]
 8003e88:	2b03      	cmp	r3, #3
 8003e8a:	d003      	beq.n	8003e94 <USB_EPClearStall+0x4c>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	791b      	ldrb	r3, [r3, #4]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d138      	bne.n	8003f06 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	0151      	lsls	r1, r2, #5
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	440a      	add	r2, r1
 8003eaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003eae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eb2:	6013      	str	r3, [r2, #0]
 8003eb4:	e027      	b.n	8003f06 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	0151      	lsls	r1, r2, #5
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	440a      	add	r2, r1
 8003ecc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ed0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ed4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	791b      	ldrb	r3, [r3, #4]
 8003eda:	2b03      	cmp	r3, #3
 8003edc:	d003      	beq.n	8003ee6 <USB_EPClearStall+0x9e>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	791b      	ldrb	r3, [r3, #4]
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d10f      	bne.n	8003f06 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	0151      	lsls	r1, r2, #5
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	440a      	add	r2, r1
 8003efc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f04:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f32:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003f36:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	78fb      	ldrb	r3, [r7, #3]
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8003f48:	68f9      	ldr	r1, [r7, #12]
 8003f4a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003f7a:	f023 0303 	bic.w	r3, r3, #3
 8003f7e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f8e:	f023 0302 	bic.w	r3, r3, #2
 8003f92:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b085      	sub	sp, #20
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003fbc:	f023 0303 	bic.w	r3, r3, #3
 8003fc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fd0:	f043 0302 	orr.w	r3, r3, #2
 8003fd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800400a:	b480      	push	{r7}
 800400c:	b085      	sub	sp, #20
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	4013      	ands	r3, r2
 800402c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	0c1b      	lsrs	r3, r3, #16
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800403e:	b480      	push	{r7}
 8004040:	b085      	sub	sp, #20
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	4013      	ands	r3, r2
 8004060:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	b29b      	uxth	r3, r3
}
 8004066:	4618      	mov	r0, r3
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004072:	b480      	push	{r7}
 8004074:	b085      	sub	sp, #20
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
 800407a:	460b      	mov	r3, r1
 800407c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	015a      	lsls	r2, r3, #5
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4413      	add	r3, r2
 800408a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	4013      	ands	r3, r2
 800409e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80040a0:	68bb      	ldr	r3, [r7, #8]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b087      	sub	sp, #28
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
 80040b6:	460b      	mov	r3, r1
 80040b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040d0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80040d2:	78fb      	ldrb	r3, [r7, #3]
 80040d4:	f003 030f 	and.w	r3, r3, #15
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	fa22 f303 	lsr.w	r3, r2, r3
 80040de:	01db      	lsls	r3, r3, #7
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80040e8:	78fb      	ldrb	r3, [r7, #3]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4013      	ands	r3, r2
 80040fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80040fc:	68bb      	ldr	r3, [r7, #8]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	371c      	adds	r7, #28
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f003 0301 	and.w	r3, r3, #1
}
 800411a:	4618      	mov	r0, r3
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004126:	b480      	push	{r7}
 8004128:	b085      	sub	sp, #20
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004140:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004144:	f023 0307 	bic.w	r3, r3, #7
 8004148:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004158:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800415c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3714      	adds	r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	460b      	mov	r3, r1
 8004176:	607a      	str	r2, [r7, #4]
 8004178:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	333c      	adds	r3, #60	@ 0x3c
 8004182:	3304      	adds	r3, #4
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	4a26      	ldr	r2, [pc, #152]	@ (8004224 <USB_EP0_OutStart+0xb8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d90a      	bls.n	80041a6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800419c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041a0:	d101      	bne.n	80041a6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	e037      	b.n	8004216 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ac:	461a      	mov	r2, r3
 80041ae:	2300      	movs	r3, #0
 80041b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80041c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041d4:	f043 0318 	orr.w	r3, r3, #24
 80041d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041e8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80041ec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80041ee:	7afb      	ldrb	r3, [r7, #11]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d10f      	bne.n	8004214 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041fa:	461a      	mov	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800420e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004212:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	371c      	adds	r7, #28
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	4f54300a 	.word	0x4f54300a

08004228 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	3301      	adds	r3, #1
 8004238:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004240:	d901      	bls.n	8004246 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e022      	b.n	800428c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	2b00      	cmp	r3, #0
 800424c:	daf2      	bge.n	8004234 <USB_CoreReset+0xc>

  count = 10U;
 800424e:	230a      	movs	r3, #10
 8004250:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004252:	e002      	b.n	800425a <USB_CoreReset+0x32>
  {
    count--;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3b01      	subs	r3, #1
 8004258:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1f9      	bne.n	8004254 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	f043 0201 	orr.w	r2, r3, #1
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	3301      	adds	r3, #1
 8004270:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004278:	d901      	bls.n	800427e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e006      	b.n	800428c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b01      	cmp	r3, #1
 8004288:	d0f0      	beq.n	800426c <USB_CoreReset+0x44>

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	460b      	mov	r3, r1
 80042a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80042a4:	2010      	movs	r0, #16
 80042a6:	f002 f939 	bl	800651c <USBD_static_malloc>
 80042aa:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d109      	bne.n	80042c6 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	32b0      	adds	r2, #176	@ 0xb0
 80042bc:	2100      	movs	r1, #0
 80042be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80042c2:	2302      	movs	r3, #2
 80042c4:	e048      	b.n	8004358 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	32b0      	adds	r2, #176	@ 0xb0
 80042d0:	68f9      	ldr	r1, [r7, #12]
 80042d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	32b0      	adds	r2, #176	@ 0xb0
 80042e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	7c1b      	ldrb	r3, [r3, #16]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10d      	bne.n	800430e <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80042f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004360 <USBD_HID_Init+0xc8>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	f003 020f 	and.w	r2, r3, #15
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	4613      	mov	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	331c      	adds	r3, #28
 8004308:	2207      	movs	r2, #7
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	e00c      	b.n	8004328 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800430e:	4b14      	ldr	r3, [pc, #80]	@ (8004360 <USBD_HID_Init+0xc8>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	f003 020f 	and.w	r2, r3, #15
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	4613      	mov	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	331c      	adds	r3, #28
 8004324:	220a      	movs	r2, #10
 8004326:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004328:	4b0d      	ldr	r3, [pc, #52]	@ (8004360 <USBD_HID_Init+0xc8>)
 800432a:	7819      	ldrb	r1, [r3, #0]
 800432c:	2308      	movs	r3, #8
 800432e:	2203      	movs	r2, #3
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f001 ffe2 	bl	80062fa <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8004336:	4b0a      	ldr	r3, [pc, #40]	@ (8004360 <USBD_HID_Init+0xc8>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	f003 020f 	and.w	r2, r3, #15
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	4613      	mov	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	3323      	adds	r3, #35	@ 0x23
 800434c:	2201      	movs	r2, #1
 800434e:	701a      	strb	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	2000013b 	.word	0x2000013b

08004364 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	460b      	mov	r3, r1
 800436e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8004370:	4b1f      	ldr	r3, [pc, #124]	@ (80043f0 <USBD_HID_DeInit+0x8c>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	4619      	mov	r1, r3
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f001 ffe5 	bl	8006346 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800437c:	4b1c      	ldr	r3, [pc, #112]	@ (80043f0 <USBD_HID_DeInit+0x8c>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	f003 020f 	and.w	r2, r3, #15
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	440b      	add	r3, r1
 8004390:	3323      	adds	r3, #35	@ 0x23
 8004392:	2200      	movs	r2, #0
 8004394:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8004396:	4b16      	ldr	r3, [pc, #88]	@ (80043f0 <USBD_HID_DeInit+0x8c>)
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	f003 020f 	and.w	r2, r3, #15
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	331c      	adds	r3, #28
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	32b0      	adds	r2, #176	@ 0xb0
 80043ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d011      	beq.n	80043e6 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	32b0      	adds	r2, #176	@ 0xb0
 80043cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f002 f8b1 	bl	8006538 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	32b0      	adds	r2, #176	@ 0xb0
 80043e0:	2100      	movs	r1, #0
 80043e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	2000013b 	.word	0x2000013b

080043f4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	32b0      	adds	r2, #176	@ 0xb0
 8004408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800440c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800440e:	2300      	movs	r3, #0
 8004410:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800441c:	2303      	movs	r3, #3
 800441e:	e0e8      	b.n	80045f2 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004428:	2b00      	cmp	r3, #0
 800442a:	d046      	beq.n	80044ba <USBD_HID_Setup+0xc6>
 800442c:	2b20      	cmp	r3, #32
 800442e:	f040 80d8 	bne.w	80045e2 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	785b      	ldrb	r3, [r3, #1]
 8004436:	3b02      	subs	r3, #2
 8004438:	2b09      	cmp	r3, #9
 800443a:	d836      	bhi.n	80044aa <USBD_HID_Setup+0xb6>
 800443c:	a201      	add	r2, pc, #4	@ (adr r2, 8004444 <USBD_HID_Setup+0x50>)
 800443e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004442:	bf00      	nop
 8004444:	0800449b 	.word	0x0800449b
 8004448:	0800447b 	.word	0x0800447b
 800444c:	080044ab 	.word	0x080044ab
 8004450:	080044ab 	.word	0x080044ab
 8004454:	080044ab 	.word	0x080044ab
 8004458:	080044ab 	.word	0x080044ab
 800445c:	080044ab 	.word	0x080044ab
 8004460:	080044ab 	.word	0x080044ab
 8004464:	08004489 	.word	0x08004489
 8004468:	0800446d 	.word	0x0800446d
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	885b      	ldrh	r3, [r3, #2]
 8004470:	b2db      	uxtb	r3, r3
 8004472:	461a      	mov	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	601a      	str	r2, [r3, #0]
          break;
 8004478:	e01e      	b.n	80044b8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2201      	movs	r2, #1
 800447e:	4619      	mov	r1, r3
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f001 fbfb 	bl	8005c7c <USBD_CtlSendData>
          break;
 8004486:	e017      	b.n	80044b8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	885b      	ldrh	r3, [r3, #2]
 800448c:	0a1b      	lsrs	r3, r3, #8
 800448e:	b29b      	uxth	r3, r3
 8004490:	b2db      	uxtb	r3, r3
 8004492:	461a      	mov	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	605a      	str	r2, [r3, #4]
          break;
 8004498:	e00e      	b.n	80044b8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	3304      	adds	r3, #4
 800449e:	2201      	movs	r2, #1
 80044a0:	4619      	mov	r1, r3
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f001 fbea 	bl	8005c7c <USBD_CtlSendData>
          break;
 80044a8:	e006      	b.n	80044b8 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80044aa:	6839      	ldr	r1, [r7, #0]
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f001 fb68 	bl	8005b82 <USBD_CtlError>
          ret = USBD_FAIL;
 80044b2:	2303      	movs	r3, #3
 80044b4:	75fb      	strb	r3, [r7, #23]
          break;
 80044b6:	bf00      	nop
      }
      break;
 80044b8:	e09a      	b.n	80045f0 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	785b      	ldrb	r3, [r3, #1]
 80044be:	2b0b      	cmp	r3, #11
 80044c0:	f200 8086 	bhi.w	80045d0 <USBD_HID_Setup+0x1dc>
 80044c4:	a201      	add	r2, pc, #4	@ (adr r2, 80044cc <USBD_HID_Setup+0xd8>)
 80044c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ca:	bf00      	nop
 80044cc:	080044fd 	.word	0x080044fd
 80044d0:	080045df 	.word	0x080045df
 80044d4:	080045d1 	.word	0x080045d1
 80044d8:	080045d1 	.word	0x080045d1
 80044dc:	080045d1 	.word	0x080045d1
 80044e0:	080045d1 	.word	0x080045d1
 80044e4:	08004527 	.word	0x08004527
 80044e8:	080045d1 	.word	0x080045d1
 80044ec:	080045d1 	.word	0x080045d1
 80044f0:	080045d1 	.word	0x080045d1
 80044f4:	0800457f 	.word	0x0800457f
 80044f8:	080045a9 	.word	0x080045a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b03      	cmp	r3, #3
 8004506:	d107      	bne.n	8004518 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004508:	f107 030a 	add.w	r3, r7, #10
 800450c:	2202      	movs	r2, #2
 800450e:	4619      	mov	r1, r3
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f001 fbb3 	bl	8005c7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004516:	e063      	b.n	80045e0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8004518:	6839      	ldr	r1, [r7, #0]
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f001 fb31 	bl	8005b82 <USBD_CtlError>
            ret = USBD_FAIL;
 8004520:	2303      	movs	r3, #3
 8004522:	75fb      	strb	r3, [r7, #23]
          break;
 8004524:	e05c      	b.n	80045e0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	885b      	ldrh	r3, [r3, #2]
 800452a:	0a1b      	lsrs	r3, r3, #8
 800452c:	b29b      	uxth	r3, r3
 800452e:	2b22      	cmp	r3, #34	@ 0x22
 8004530:	d108      	bne.n	8004544 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	88db      	ldrh	r3, [r3, #6]
 8004536:	2bbb      	cmp	r3, #187	@ 0xbb
 8004538:	bf28      	it	cs
 800453a:	23bb      	movcs	r3, #187	@ 0xbb
 800453c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800453e:	4b2f      	ldr	r3, [pc, #188]	@ (80045fc <USBD_HID_Setup+0x208>)
 8004540:	613b      	str	r3, [r7, #16]
 8004542:	e015      	b.n	8004570 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	885b      	ldrh	r3, [r3, #2]
 8004548:	0a1b      	lsrs	r3, r3, #8
 800454a:	b29b      	uxth	r3, r3
 800454c:	2b21      	cmp	r3, #33	@ 0x21
 800454e:	d108      	bne.n	8004562 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8004550:	4b2b      	ldr	r3, [pc, #172]	@ (8004600 <USBD_HID_Setup+0x20c>)
 8004552:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	88db      	ldrh	r3, [r3, #6]
 8004558:	2b09      	cmp	r3, #9
 800455a:	bf28      	it	cs
 800455c:	2309      	movcs	r3, #9
 800455e:	82bb      	strh	r3, [r7, #20]
 8004560:	e006      	b.n	8004570 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8004562:	6839      	ldr	r1, [r7, #0]
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f001 fb0c 	bl	8005b82 <USBD_CtlError>
            ret = USBD_FAIL;
 800456a:	2303      	movs	r3, #3
 800456c:	75fb      	strb	r3, [r7, #23]
            break;
 800456e:	e037      	b.n	80045e0 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8004570:	8abb      	ldrh	r3, [r7, #20]
 8004572:	461a      	mov	r2, r3
 8004574:	6939      	ldr	r1, [r7, #16]
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f001 fb80 	bl	8005c7c <USBD_CtlSendData>
          break;
 800457c:	e030      	b.n	80045e0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b03      	cmp	r3, #3
 8004588:	d107      	bne.n	800459a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	3308      	adds	r3, #8
 800458e:	2201      	movs	r2, #1
 8004590:	4619      	mov	r1, r3
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f001 fb72 	bl	8005c7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004598:	e022      	b.n	80045e0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800459a:	6839      	ldr	r1, [r7, #0]
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f001 faf0 	bl	8005b82 <USBD_CtlError>
            ret = USBD_FAIL;
 80045a2:	2303      	movs	r3, #3
 80045a4:	75fb      	strb	r3, [r7, #23]
          break;
 80045a6:	e01b      	b.n	80045e0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b03      	cmp	r3, #3
 80045b2:	d106      	bne.n	80045c2 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	885b      	ldrh	r3, [r3, #2]
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	461a      	mov	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80045c0:	e00e      	b.n	80045e0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80045c2:	6839      	ldr	r1, [r7, #0]
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f001 fadc 	bl	8005b82 <USBD_CtlError>
            ret = USBD_FAIL;
 80045ca:	2303      	movs	r3, #3
 80045cc:	75fb      	strb	r3, [r7, #23]
          break;
 80045ce:	e007      	b.n	80045e0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80045d0:	6839      	ldr	r1, [r7, #0]
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f001 fad5 	bl	8005b82 <USBD_CtlError>
          ret = USBD_FAIL;
 80045d8:	2303      	movs	r3, #3
 80045da:	75fb      	strb	r3, [r7, #23]
          break;
 80045dc:	e000      	b.n	80045e0 <USBD_HID_Setup+0x1ec>
          break;
 80045de:	bf00      	nop
      }
      break;
 80045e0:	e006      	b.n	80045f0 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80045e2:	6839      	ldr	r1, [r7, #0]
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f001 facc 	bl	8005b82 <USBD_CtlError>
      ret = USBD_FAIL;
 80045ea:	2303      	movs	r3, #3
 80045ec:	75fb      	strb	r3, [r7, #23]
      break;
 80045ee:	bf00      	nop
  }

  return (uint8_t)ret;
 80045f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3718      	adds	r7, #24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20000080 	.word	0x20000080
 8004600:	20000068 	.word	0x20000068

08004604 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	4613      	mov	r3, r2
 8004610:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	32b0      	adds	r2, #176	@ 0xb0
 800461c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004620:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004628:	2303      	movs	r3, #3
 800462a:	e014      	b.n	8004656 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b03      	cmp	r3, #3
 8004636:	d10d      	bne.n	8004654 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	7b1b      	ldrb	r3, [r3, #12]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d109      	bne.n	8004654 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	2201      	movs	r2, #1
 8004644:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8004646:	4b06      	ldr	r3, [pc, #24]	@ (8004660 <USBD_HID_SendReport+0x5c>)
 8004648:	7819      	ldrb	r1, [r3, #0]
 800464a:	88fb      	ldrh	r3, [r7, #6]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f001 ff21 	bl	8006496 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	2000013b 	.word	0x2000013b

08004664 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800466c:	2181      	movs	r1, #129	@ 0x81
 800466e:	4809      	ldr	r0, [pc, #36]	@ (8004694 <USBD_HID_GetFSCfgDesc+0x30>)
 8004670:	f000 fc4e 	bl	8004f10 <USBD_GetEpDesc>
 8004674:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	220a      	movs	r2, #10
 8004680:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2222      	movs	r2, #34	@ 0x22
 8004686:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8004688:	4b02      	ldr	r3, [pc, #8]	@ (8004694 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	20000044 	.word	0x20000044

08004698 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80046a0:	2181      	movs	r1, #129	@ 0x81
 80046a2:	4809      	ldr	r0, [pc, #36]	@ (80046c8 <USBD_HID_GetHSCfgDesc+0x30>)
 80046a4:	f000 fc34 	bl	8004f10 <USBD_GetEpDesc>
 80046a8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d002      	beq.n	80046b6 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2207      	movs	r2, #7
 80046b4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2222      	movs	r2, #34	@ 0x22
 80046ba:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80046bc:	4b02      	ldr	r3, [pc, #8]	@ (80046c8 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	20000044 	.word	0x20000044

080046cc <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80046d4:	2181      	movs	r1, #129	@ 0x81
 80046d6:	4809      	ldr	r0, [pc, #36]	@ (80046fc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80046d8:	f000 fc1a 	bl	8004f10 <USBD_GetEpDesc>
 80046dc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	220a      	movs	r2, #10
 80046e8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2222      	movs	r2, #34	@ 0x22
 80046ee:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80046f0:	4b02      	ldr	r3, [pc, #8]	@ (80046fc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	20000044 	.word	0x20000044

08004700 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	460b      	mov	r3, r1
 800470a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	32b0      	adds	r2, #176	@ 0xb0
 8004716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800471a:	2200      	movs	r2, #0
 800471c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	220a      	movs	r2, #10
 8004738:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800473a:	4b03      	ldr	r3, [pc, #12]	@ (8004748 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800473c:	4618      	mov	r0, r3
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	20000074 	.word	0x20000074

0800474c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	4613      	mov	r3, r2
 8004758:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004760:	2303      	movs	r3, #3
 8004762:	e01f      	b.n	80047a4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	79fa      	ldrb	r2, [r7, #7]
 8004796:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f001 fd47 	bl	800622c <USBD_LL_Init>
 800479e:	4603      	mov	r3, r0
 80047a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80047a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3718      	adds	r7, #24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e025      	b.n	8004810 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	32ae      	adds	r2, #174	@ 0xae
 80047d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00f      	beq.n	8004800 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	32ae      	adds	r2, #174	@ 0xae
 80047ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f0:	f107 020e 	add.w	r2, r7, #14
 80047f4:	4610      	mov	r0, r2
 80047f6:	4798      	blx	r3
 80047f8:	4602      	mov	r2, r0
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f001 fd4f 	bl	80062c4 <USBD_LL_Start>
 8004826:	4603      	mov	r3, r0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004838:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800483a:	4618      	mov	r0, r3
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b084      	sub	sp, #16
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
 800484e:	460b      	mov	r3, r1
 8004850:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004852:	2300      	movs	r3, #0
 8004854:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800485c:	2b00      	cmp	r3, #0
 800485e:	d009      	beq.n	8004874 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	78fa      	ldrb	r2, [r7, #3]
 800486a:	4611      	mov	r1, r2
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	4798      	blx	r3
 8004870:	4603      	mov	r3, r0
 8004872:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004874:	7bfb      	ldrb	r3, [r7, #15]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b084      	sub	sp, #16
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	460b      	mov	r3, r1
 8004888:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	78fa      	ldrb	r2, [r7, #3]
 8004898:	4611      	mov	r1, r2
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	4798      	blx	r3
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d001      	beq.n	80048a8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80048a4:	2303      	movs	r3, #3
 80048a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b084      	sub	sp, #16
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
 80048ba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80048c2:	6839      	ldr	r1, [r7, #0]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f001 f922 	bl	8005b0e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80048d8:	461a      	mov	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80048e6:	f003 031f 	and.w	r3, r3, #31
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d01a      	beq.n	8004924 <USBD_LL_SetupStage+0x72>
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d822      	bhi.n	8004938 <USBD_LL_SetupStage+0x86>
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <USBD_LL_SetupStage+0x4a>
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d00a      	beq.n	8004910 <USBD_LL_SetupStage+0x5e>
 80048fa:	e01d      	b.n	8004938 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004902:	4619      	mov	r1, r3
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 fb77 	bl	8004ff8 <USBD_StdDevReq>
 800490a:	4603      	mov	r3, r0
 800490c:	73fb      	strb	r3, [r7, #15]
      break;
 800490e:	e020      	b.n	8004952 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004916:	4619      	mov	r1, r3
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fbdf 	bl	80050dc <USBD_StdItfReq>
 800491e:	4603      	mov	r3, r0
 8004920:	73fb      	strb	r3, [r7, #15]
      break;
 8004922:	e016      	b.n	8004952 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800492a:	4619      	mov	r1, r3
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 fc41 	bl	80051b4 <USBD_StdEPReq>
 8004932:	4603      	mov	r3, r0
 8004934:	73fb      	strb	r3, [r7, #15]
      break;
 8004936:	e00c      	b.n	8004952 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800493e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004942:	b2db      	uxtb	r3, r3
 8004944:	4619      	mov	r1, r3
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f001 fd1c 	bl	8006384 <USBD_LL_StallEP>
 800494c:	4603      	mov	r3, r0
 800494e:	73fb      	strb	r3, [r7, #15]
      break;
 8004950:	bf00      	nop
  }

  return ret;
 8004952:	7bfb      	ldrb	r3, [r7, #15]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	460b      	mov	r3, r1
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800496a:	2300      	movs	r3, #0
 800496c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800496e:	7afb      	ldrb	r3, [r7, #11]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d177      	bne.n	8004a64 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800497a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004982:	2b03      	cmp	r3, #3
 8004984:	f040 80a1 	bne.w	8004aca <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	8992      	ldrh	r2, [r2, #12]
 8004990:	4293      	cmp	r3, r2
 8004992:	d91c      	bls.n	80049ce <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	8992      	ldrh	r2, [r2, #12]
 800499c:	1a9a      	subs	r2, r3, r2
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	8992      	ldrh	r2, [r2, #12]
 80049aa:	441a      	add	r2, r3
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	6919      	ldr	r1, [r3, #16]
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	899b      	ldrh	r3, [r3, #12]
 80049b8:	461a      	mov	r2, r3
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	4293      	cmp	r3, r2
 80049c0:	bf38      	it	cc
 80049c2:	4613      	movcc	r3, r2
 80049c4:	461a      	mov	r2, r3
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f001 f987 	bl	8005cda <USBD_CtlContinueRx>
 80049cc:	e07d      	b.n	8004aca <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80049d4:	f003 031f 	and.w	r3, r3, #31
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d014      	beq.n	8004a06 <USBD_LL_DataOutStage+0xaa>
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d81d      	bhi.n	8004a1c <USBD_LL_DataOutStage+0xc0>
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <USBD_LL_DataOutStage+0x8e>
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d003      	beq.n	80049f0 <USBD_LL_DataOutStage+0x94>
 80049e8:	e018      	b.n	8004a1c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	75bb      	strb	r3, [r7, #22]
            break;
 80049ee:	e018      	b.n	8004a22 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	4619      	mov	r1, r3
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 fa6e 	bl	8004edc <USBD_CoreFindIF>
 8004a00:	4603      	mov	r3, r0
 8004a02:	75bb      	strb	r3, [r7, #22]
            break;
 8004a04:	e00d      	b.n	8004a22 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	4619      	mov	r1, r3
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 fa70 	bl	8004ef6 <USBD_CoreFindEP>
 8004a16:	4603      	mov	r3, r0
 8004a18:	75bb      	strb	r3, [r7, #22]
            break;
 8004a1a:	e002      	b.n	8004a22 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	75bb      	strb	r3, [r7, #22]
            break;
 8004a20:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004a22:	7dbb      	ldrb	r3, [r7, #22]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d119      	bne.n	8004a5c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	d113      	bne.n	8004a5c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004a34:	7dba      	ldrb	r2, [r7, #22]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	32ae      	adds	r2, #174	@ 0xae
 8004a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00b      	beq.n	8004a5c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8004a44:	7dba      	ldrb	r2, [r7, #22]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004a4c:	7dba      	ldrb	r2, [r7, #22]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	32ae      	adds	r2, #174	@ 0xae
 8004a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f001 f94d 	bl	8005cfc <USBD_CtlSendStatus>
 8004a62:	e032      	b.n	8004aca <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004a64:	7afb      	ldrb	r3, [r7, #11]
 8004a66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 fa41 	bl	8004ef6 <USBD_CoreFindEP>
 8004a74:	4603      	mov	r3, r0
 8004a76:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004a78:	7dbb      	ldrb	r3, [r7, #22]
 8004a7a:	2bff      	cmp	r3, #255	@ 0xff
 8004a7c:	d025      	beq.n	8004aca <USBD_LL_DataOutStage+0x16e>
 8004a7e:	7dbb      	ldrb	r3, [r7, #22]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d122      	bne.n	8004aca <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b03      	cmp	r3, #3
 8004a8e:	d117      	bne.n	8004ac0 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004a90:	7dba      	ldrb	r2, [r7, #22]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	32ae      	adds	r2, #174	@ 0xae
 8004a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00f      	beq.n	8004ac0 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8004aa0:	7dba      	ldrb	r2, [r7, #22]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004aa8:	7dba      	ldrb	r2, [r7, #22]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	32ae      	adds	r2, #174	@ 0xae
 8004aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	7afa      	ldrb	r2, [r7, #11]
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	4798      	blx	r3
 8004abc:	4603      	mov	r3, r0
 8004abe:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004ac0:	7dfb      	ldrb	r3, [r7, #23]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8004ac6:	7dfb      	ldrb	r3, [r7, #23]
 8004ac8:	e000      	b.n	8004acc <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	460b      	mov	r3, r1
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8004ae2:	7afb      	ldrb	r3, [r7, #11]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d178      	bne.n	8004bda <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	3314      	adds	r3, #20
 8004aec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d163      	bne.n	8004bc0 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	8992      	ldrh	r2, [r2, #12]
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d91c      	bls.n	8004b3e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	8992      	ldrh	r2, [r2, #12]
 8004b0c:	1a9a      	subs	r2, r3, r2
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	8992      	ldrh	r2, [r2, #12]
 8004b1a:	441a      	add	r2, r3
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	6919      	ldr	r1, [r3, #16]
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f001 f8c4 	bl	8005cb8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004b30:	2300      	movs	r3, #0
 8004b32:	2200      	movs	r2, #0
 8004b34:	2100      	movs	r1, #0
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f001 fcce 	bl	80064d8 <USBD_LL_PrepareReceive>
 8004b3c:	e040      	b.n	8004bc0 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	899b      	ldrh	r3, [r3, #12]
 8004b42:	461a      	mov	r2, r3
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d11c      	bne.n	8004b86 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d316      	bcc.n	8004b86 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d20f      	bcs.n	8004b86 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004b66:	2200      	movs	r2, #0
 8004b68:	2100      	movs	r1, #0
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f001 f8a4 	bl	8005cb8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004b78:	2300      	movs	r3, #0
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f001 fcaa 	bl	80064d8 <USBD_LL_PrepareReceive>
 8004b84:	e01c      	b.n	8004bc0 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d10f      	bne.n	8004bb2 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d009      	beq.n	8004bb2 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004bb2:	2180      	movs	r1, #128	@ 0x80
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f001 fbe5 	bl	8006384 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f001 f8b1 	bl	8005d22 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d03a      	beq.n	8004c40 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f7ff fe30 	bl	8004830 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8004bd8:	e032      	b.n	8004c40 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8004bda:	7afb      	ldrb	r3, [r7, #11]
 8004bdc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	4619      	mov	r1, r3
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f986 	bl	8004ef6 <USBD_CoreFindEP>
 8004bea:	4603      	mov	r3, r0
 8004bec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004bee:	7dfb      	ldrb	r3, [r7, #23]
 8004bf0:	2bff      	cmp	r3, #255	@ 0xff
 8004bf2:	d025      	beq.n	8004c40 <USBD_LL_DataInStage+0x16c>
 8004bf4:	7dfb      	ldrb	r3, [r7, #23]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d122      	bne.n	8004c40 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b03      	cmp	r3, #3
 8004c04:	d11c      	bne.n	8004c40 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8004c06:	7dfa      	ldrb	r2, [r7, #23]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	32ae      	adds	r2, #174	@ 0xae
 8004c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d014      	beq.n	8004c40 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8004c16:	7dfa      	ldrb	r2, [r7, #23]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004c1e:	7dfa      	ldrb	r2, [r7, #23]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	32ae      	adds	r2, #174	@ 0xae
 8004c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	7afa      	ldrb	r2, [r7, #11]
 8004c2c:	4611      	mov	r1, r2
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	4798      	blx	r3
 8004c32:	4603      	mov	r3, r0
 8004c34:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8004c36:	7dbb      	ldrb	r3, [r7, #22]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8004c3c:	7dbb      	ldrb	r3, [r7, #22]
 8004c3e:	e000      	b.n	8004c42 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b084      	sub	sp, #16
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c52:	2300      	movs	r3, #0
 8004c54:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d014      	beq.n	8004cb0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00e      	beq.n	8004cb0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	6852      	ldr	r2, [r2, #4]
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	4611      	mov	r1, r2
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	4798      	blx	r3
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8004cac:	2303      	movs	r3, #3
 8004cae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004cb0:	2340      	movs	r3, #64	@ 0x40
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f001 fb1f 	bl	80062fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2240      	movs	r2, #64	@ 0x40
 8004cc8:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004ccc:	2340      	movs	r3, #64	@ 0x40
 8004cce:	2200      	movs	r2, #0
 8004cd0:	2180      	movs	r1, #128	@ 0x80
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f001 fb11 	bl	80062fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2240      	movs	r2, #64	@ 0x40
 8004ce4:	841a      	strh	r2, [r3, #32]

  return ret;
 8004ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	78fa      	ldrb	r2, [r7, #3]
 8004d00:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	d006      	beq.n	8004d32 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2204      	movs	r2, #4
 8004d36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	d106      	bne.n	8004d6a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d110      	bne.n	8004dae <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00b      	beq.n	8004dae <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d005      	beq.n	8004dae <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	32ae      	adds	r2, #174	@ 0xae
 8004dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e01c      	b.n	8004e14 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b03      	cmp	r3, #3
 8004de4:	d115      	bne.n	8004e12 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	32ae      	adds	r2, #174	@ 0xae
 8004df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00b      	beq.n	8004e12 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	32ae      	adds	r2, #174	@ 0xae
 8004e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	78fa      	ldrb	r2, [r7, #3]
 8004e0c:	4611      	mov	r1, r2
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	460b      	mov	r3, r1
 8004e26:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	32ae      	adds	r2, #174	@ 0xae
 8004e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e01c      	b.n	8004e78 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b03      	cmp	r3, #3
 8004e48:	d115      	bne.n	8004e76 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	32ae      	adds	r2, #174	@ 0xae
 8004e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00b      	beq.n	8004e76 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	32ae      	adds	r2, #174	@ 0xae
 8004e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6e:	78fa      	ldrb	r2, [r7, #3]
 8004e70:	4611      	mov	r1, r2
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b084      	sub	sp, #16
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00e      	beq.n	8004ed2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6852      	ldr	r2, [r2, #4]
 8004ec0:	b2d2      	uxtb	r2, r2
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	4798      	blx	r3
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8004ee8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
 8004efe:	460b      	mov	r3, r1
 8004f00:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8004f02:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	460b      	mov	r3, r1
 8004f1a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8004f24:	2300      	movs	r3, #0
 8004f26:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	885b      	ldrh	r3, [r3, #2]
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	7812      	ldrb	r2, [r2, #0]
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d91f      	bls.n	8004f76 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8004f3c:	e013      	b.n	8004f66 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8004f3e:	f107 030a 	add.w	r3, r7, #10
 8004f42:	4619      	mov	r1, r3
 8004f44:	6978      	ldr	r0, [r7, #20]
 8004f46:	f000 f81b 	bl	8004f80 <USBD_GetNextDesc>
 8004f4a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	785b      	ldrb	r3, [r3, #1]
 8004f50:	2b05      	cmp	r3, #5
 8004f52:	d108      	bne.n	8004f66 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	789b      	ldrb	r3, [r3, #2]
 8004f5c:	78fa      	ldrb	r2, [r7, #3]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d008      	beq.n	8004f74 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8004f62:	2300      	movs	r3, #0
 8004f64:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	885b      	ldrh	r3, [r3, #2]
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	897b      	ldrh	r3, [r7, #10]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d8e5      	bhi.n	8004f3e <USBD_GetEpDesc+0x2e>
 8004f72:	e000      	b.n	8004f76 <USBD_GetEpDesc+0x66>
          break;
 8004f74:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8004f76:	693b      	ldr	r3, [r7, #16]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	7812      	ldrb	r2, [r2, #0]
 8004f96:	4413      	add	r3, r2
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8004faa:	68fb      	ldr	r3, [r7, #12]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b087      	sub	sp, #28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004fd6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004fda:	021b      	lsls	r3, r3, #8
 8004fdc:	b21a      	sxth	r2, r3
 8004fde:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	b21b      	sxth	r3, r3
 8004fe6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004fe8:	89fb      	ldrh	r3, [r7, #14]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	371c      	adds	r7, #28
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
	...

08004ff8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800500e:	2b40      	cmp	r3, #64	@ 0x40
 8005010:	d005      	beq.n	800501e <USBD_StdDevReq+0x26>
 8005012:	2b40      	cmp	r3, #64	@ 0x40
 8005014:	d857      	bhi.n	80050c6 <USBD_StdDevReq+0xce>
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00f      	beq.n	800503a <USBD_StdDevReq+0x42>
 800501a:	2b20      	cmp	r3, #32
 800501c:	d153      	bne.n	80050c6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	32ae      	adds	r2, #174	@ 0xae
 8005028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	6839      	ldr	r1, [r7, #0]
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	4798      	blx	r3
 8005034:	4603      	mov	r3, r0
 8005036:	73fb      	strb	r3, [r7, #15]
      break;
 8005038:	e04a      	b.n	80050d0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	785b      	ldrb	r3, [r3, #1]
 800503e:	2b09      	cmp	r3, #9
 8005040:	d83b      	bhi.n	80050ba <USBD_StdDevReq+0xc2>
 8005042:	a201      	add	r2, pc, #4	@ (adr r2, 8005048 <USBD_StdDevReq+0x50>)
 8005044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005048:	0800509d 	.word	0x0800509d
 800504c:	080050b1 	.word	0x080050b1
 8005050:	080050bb 	.word	0x080050bb
 8005054:	080050a7 	.word	0x080050a7
 8005058:	080050bb 	.word	0x080050bb
 800505c:	0800507b 	.word	0x0800507b
 8005060:	08005071 	.word	0x08005071
 8005064:	080050bb 	.word	0x080050bb
 8005068:	08005093 	.word	0x08005093
 800506c:	08005085 	.word	0x08005085
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005070:	6839      	ldr	r1, [r7, #0]
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 fa3e 	bl	80054f4 <USBD_GetDescriptor>
          break;
 8005078:	e024      	b.n	80050c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800507a:	6839      	ldr	r1, [r7, #0]
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 fba3 	bl	80057c8 <USBD_SetAddress>
          break;
 8005082:	e01f      	b.n	80050c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005084:	6839      	ldr	r1, [r7, #0]
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 fbe2 	bl	8005850 <USBD_SetConfig>
 800508c:	4603      	mov	r3, r0
 800508e:	73fb      	strb	r3, [r7, #15]
          break;
 8005090:	e018      	b.n	80050c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005092:	6839      	ldr	r1, [r7, #0]
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 fc85 	bl	80059a4 <USBD_GetConfig>
          break;
 800509a:	e013      	b.n	80050c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800509c:	6839      	ldr	r1, [r7, #0]
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fcb6 	bl	8005a10 <USBD_GetStatus>
          break;
 80050a4:	e00e      	b.n	80050c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80050a6:	6839      	ldr	r1, [r7, #0]
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 fce5 	bl	8005a78 <USBD_SetFeature>
          break;
 80050ae:	e009      	b.n	80050c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80050b0:	6839      	ldr	r1, [r7, #0]
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 fd09 	bl	8005aca <USBD_ClrFeature>
          break;
 80050b8:	e004      	b.n	80050c4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80050ba:	6839      	ldr	r1, [r7, #0]
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 fd60 	bl	8005b82 <USBD_CtlError>
          break;
 80050c2:	bf00      	nop
      }
      break;
 80050c4:	e004      	b.n	80050d0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80050c6:	6839      	ldr	r1, [r7, #0]
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 fd5a 	bl	8005b82 <USBD_CtlError>
      break;
 80050ce:	bf00      	nop
  }

  return ret;
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop

080050dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80050f2:	2b40      	cmp	r3, #64	@ 0x40
 80050f4:	d005      	beq.n	8005102 <USBD_StdItfReq+0x26>
 80050f6:	2b40      	cmp	r3, #64	@ 0x40
 80050f8:	d852      	bhi.n	80051a0 <USBD_StdItfReq+0xc4>
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <USBD_StdItfReq+0x26>
 80050fe:	2b20      	cmp	r3, #32
 8005100:	d14e      	bne.n	80051a0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005108:	b2db      	uxtb	r3, r3
 800510a:	3b01      	subs	r3, #1
 800510c:	2b02      	cmp	r3, #2
 800510e:	d840      	bhi.n	8005192 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	889b      	ldrh	r3, [r3, #4]
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b01      	cmp	r3, #1
 8005118:	d836      	bhi.n	8005188 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	889b      	ldrh	r3, [r3, #4]
 800511e:	b2db      	uxtb	r3, r3
 8005120:	4619      	mov	r1, r3
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7ff feda 	bl	8004edc <USBD_CoreFindIF>
 8005128:	4603      	mov	r3, r0
 800512a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800512c:	7bbb      	ldrb	r3, [r7, #14]
 800512e:	2bff      	cmp	r3, #255	@ 0xff
 8005130:	d01d      	beq.n	800516e <USBD_StdItfReq+0x92>
 8005132:	7bbb      	ldrb	r3, [r7, #14]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d11a      	bne.n	800516e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005138:	7bba      	ldrb	r2, [r7, #14]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	32ae      	adds	r2, #174	@ 0xae
 800513e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00f      	beq.n	8005168 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005148:	7bba      	ldrb	r2, [r7, #14]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005150:	7bba      	ldrb	r2, [r7, #14]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	32ae      	adds	r2, #174	@ 0xae
 8005156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	6839      	ldr	r1, [r7, #0]
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	4798      	blx	r3
 8005162:	4603      	mov	r3, r0
 8005164:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005166:	e004      	b.n	8005172 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005168:	2303      	movs	r3, #3
 800516a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800516c:	e001      	b.n	8005172 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800516e:	2303      	movs	r3, #3
 8005170:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	88db      	ldrh	r3, [r3, #6]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d110      	bne.n	800519c <USBD_StdItfReq+0xc0>
 800517a:	7bfb      	ldrb	r3, [r7, #15]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10d      	bne.n	800519c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 fdbb 	bl	8005cfc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005186:	e009      	b.n	800519c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005188:	6839      	ldr	r1, [r7, #0]
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fcf9 	bl	8005b82 <USBD_CtlError>
          break;
 8005190:	e004      	b.n	800519c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005192:	6839      	ldr	r1, [r7, #0]
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 fcf4 	bl	8005b82 <USBD_CtlError>
          break;
 800519a:	e000      	b.n	800519e <USBD_StdItfReq+0xc2>
          break;
 800519c:	bf00      	nop
      }
      break;
 800519e:	e004      	b.n	80051aa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80051a0:	6839      	ldr	r1, [r7, #0]
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fced 	bl	8005b82 <USBD_CtlError>
      break;
 80051a8:	bf00      	nop
  }

  return ret;
 80051aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80051be:	2300      	movs	r3, #0
 80051c0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	889b      	ldrh	r3, [r3, #4]
 80051c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80051d0:	2b40      	cmp	r3, #64	@ 0x40
 80051d2:	d007      	beq.n	80051e4 <USBD_StdEPReq+0x30>
 80051d4:	2b40      	cmp	r3, #64	@ 0x40
 80051d6:	f200 8181 	bhi.w	80054dc <USBD_StdEPReq+0x328>
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d02a      	beq.n	8005234 <USBD_StdEPReq+0x80>
 80051de:	2b20      	cmp	r3, #32
 80051e0:	f040 817c 	bne.w	80054dc <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80051e4:	7bbb      	ldrb	r3, [r7, #14]
 80051e6:	4619      	mov	r1, r3
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f7ff fe84 	bl	8004ef6 <USBD_CoreFindEP>
 80051ee:	4603      	mov	r3, r0
 80051f0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80051f2:	7b7b      	ldrb	r3, [r7, #13]
 80051f4:	2bff      	cmp	r3, #255	@ 0xff
 80051f6:	f000 8176 	beq.w	80054e6 <USBD_StdEPReq+0x332>
 80051fa:	7b7b      	ldrb	r3, [r7, #13]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f040 8172 	bne.w	80054e6 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8005202:	7b7a      	ldrb	r2, [r7, #13]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800520a:	7b7a      	ldrb	r2, [r7, #13]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	32ae      	adds	r2, #174	@ 0xae
 8005210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 8165 	beq.w	80054e6 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800521c:	7b7a      	ldrb	r2, [r7, #13]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	32ae      	adds	r2, #174	@ 0xae
 8005222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	6839      	ldr	r1, [r7, #0]
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	4798      	blx	r3
 800522e:	4603      	mov	r3, r0
 8005230:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005232:	e158      	b.n	80054e6 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	785b      	ldrb	r3, [r3, #1]
 8005238:	2b03      	cmp	r3, #3
 800523a:	d008      	beq.n	800524e <USBD_StdEPReq+0x9a>
 800523c:	2b03      	cmp	r3, #3
 800523e:	f300 8147 	bgt.w	80054d0 <USBD_StdEPReq+0x31c>
 8005242:	2b00      	cmp	r3, #0
 8005244:	f000 809b 	beq.w	800537e <USBD_StdEPReq+0x1ca>
 8005248:	2b01      	cmp	r3, #1
 800524a:	d03c      	beq.n	80052c6 <USBD_StdEPReq+0x112>
 800524c:	e140      	b.n	80054d0 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d002      	beq.n	8005260 <USBD_StdEPReq+0xac>
 800525a:	2b03      	cmp	r3, #3
 800525c:	d016      	beq.n	800528c <USBD_StdEPReq+0xd8>
 800525e:	e02c      	b.n	80052ba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005260:	7bbb      	ldrb	r3, [r7, #14]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00d      	beq.n	8005282 <USBD_StdEPReq+0xce>
 8005266:	7bbb      	ldrb	r3, [r7, #14]
 8005268:	2b80      	cmp	r3, #128	@ 0x80
 800526a:	d00a      	beq.n	8005282 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800526c:	7bbb      	ldrb	r3, [r7, #14]
 800526e:	4619      	mov	r1, r3
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f001 f887 	bl	8006384 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005276:	2180      	movs	r1, #128	@ 0x80
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f001 f883 	bl	8006384 <USBD_LL_StallEP>
 800527e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005280:	e020      	b.n	80052c4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005282:	6839      	ldr	r1, [r7, #0]
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 fc7c 	bl	8005b82 <USBD_CtlError>
              break;
 800528a:	e01b      	b.n	80052c4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	885b      	ldrh	r3, [r3, #2]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10e      	bne.n	80052b2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005294:	7bbb      	ldrb	r3, [r7, #14]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00b      	beq.n	80052b2 <USBD_StdEPReq+0xfe>
 800529a:	7bbb      	ldrb	r3, [r7, #14]
 800529c:	2b80      	cmp	r3, #128	@ 0x80
 800529e:	d008      	beq.n	80052b2 <USBD_StdEPReq+0xfe>
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	88db      	ldrh	r3, [r3, #6]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d104      	bne.n	80052b2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80052a8:	7bbb      	ldrb	r3, [r7, #14]
 80052aa:	4619      	mov	r1, r3
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f001 f869 	bl	8006384 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fd22 	bl	8005cfc <USBD_CtlSendStatus>

              break;
 80052b8:	e004      	b.n	80052c4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80052ba:	6839      	ldr	r1, [r7, #0]
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 fc60 	bl	8005b82 <USBD_CtlError>
              break;
 80052c2:	bf00      	nop
          }
          break;
 80052c4:	e109      	b.n	80054da <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d002      	beq.n	80052d8 <USBD_StdEPReq+0x124>
 80052d2:	2b03      	cmp	r3, #3
 80052d4:	d016      	beq.n	8005304 <USBD_StdEPReq+0x150>
 80052d6:	e04b      	b.n	8005370 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80052d8:	7bbb      	ldrb	r3, [r7, #14]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00d      	beq.n	80052fa <USBD_StdEPReq+0x146>
 80052de:	7bbb      	ldrb	r3, [r7, #14]
 80052e0:	2b80      	cmp	r3, #128	@ 0x80
 80052e2:	d00a      	beq.n	80052fa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80052e4:	7bbb      	ldrb	r3, [r7, #14]
 80052e6:	4619      	mov	r1, r3
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f001 f84b 	bl	8006384 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80052ee:	2180      	movs	r1, #128	@ 0x80
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f001 f847 	bl	8006384 <USBD_LL_StallEP>
 80052f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80052f8:	e040      	b.n	800537c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80052fa:	6839      	ldr	r1, [r7, #0]
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 fc40 	bl	8005b82 <USBD_CtlError>
              break;
 8005302:	e03b      	b.n	800537c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	885b      	ldrh	r3, [r3, #2]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d136      	bne.n	800537a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800530c:	7bbb      	ldrb	r3, [r7, #14]
 800530e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005312:	2b00      	cmp	r3, #0
 8005314:	d004      	beq.n	8005320 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005316:	7bbb      	ldrb	r3, [r7, #14]
 8005318:	4619      	mov	r1, r3
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f001 f851 	bl	80063c2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fceb 	bl	8005cfc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005326:	7bbb      	ldrb	r3, [r7, #14]
 8005328:	4619      	mov	r1, r3
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7ff fde3 	bl	8004ef6 <USBD_CoreFindEP>
 8005330:	4603      	mov	r3, r0
 8005332:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005334:	7b7b      	ldrb	r3, [r7, #13]
 8005336:	2bff      	cmp	r3, #255	@ 0xff
 8005338:	d01f      	beq.n	800537a <USBD_StdEPReq+0x1c6>
 800533a:	7b7b      	ldrb	r3, [r7, #13]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d11c      	bne.n	800537a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005340:	7b7a      	ldrb	r2, [r7, #13]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005348:	7b7a      	ldrb	r2, [r7, #13]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	32ae      	adds	r2, #174	@ 0xae
 800534e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d010      	beq.n	800537a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005358:	7b7a      	ldrb	r2, [r7, #13]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	32ae      	adds	r2, #174	@ 0xae
 800535e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	6839      	ldr	r1, [r7, #0]
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	4798      	blx	r3
 800536a:	4603      	mov	r3, r0
 800536c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800536e:	e004      	b.n	800537a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005370:	6839      	ldr	r1, [r7, #0]
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fc05 	bl	8005b82 <USBD_CtlError>
              break;
 8005378:	e000      	b.n	800537c <USBD_StdEPReq+0x1c8>
              break;
 800537a:	bf00      	nop
          }
          break;
 800537c:	e0ad      	b.n	80054da <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b02      	cmp	r3, #2
 8005388:	d002      	beq.n	8005390 <USBD_StdEPReq+0x1dc>
 800538a:	2b03      	cmp	r3, #3
 800538c:	d033      	beq.n	80053f6 <USBD_StdEPReq+0x242>
 800538e:	e099      	b.n	80054c4 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005390:	7bbb      	ldrb	r3, [r7, #14]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d007      	beq.n	80053a6 <USBD_StdEPReq+0x1f2>
 8005396:	7bbb      	ldrb	r3, [r7, #14]
 8005398:	2b80      	cmp	r3, #128	@ 0x80
 800539a:	d004      	beq.n	80053a6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800539c:	6839      	ldr	r1, [r7, #0]
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 fbef 	bl	8005b82 <USBD_CtlError>
                break;
 80053a4:	e093      	b.n	80054ce <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80053a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	da0b      	bge.n	80053c6 <USBD_StdEPReq+0x212>
 80053ae:	7bbb      	ldrb	r3, [r7, #14]
 80053b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80053b4:	4613      	mov	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4413      	add	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	3310      	adds	r3, #16
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	4413      	add	r3, r2
 80053c2:	3304      	adds	r3, #4
 80053c4:	e00b      	b.n	80053de <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80053c6:	7bbb      	ldrb	r3, [r7, #14]
 80053c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80053cc:	4613      	mov	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	4413      	add	r3, r2
 80053dc:	3304      	adds	r3, #4
 80053de:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2200      	movs	r2, #0
 80053e4:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	330e      	adds	r3, #14
 80053ea:	2202      	movs	r2, #2
 80053ec:	4619      	mov	r1, r3
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fc44 	bl	8005c7c <USBD_CtlSendData>
              break;
 80053f4:	e06b      	b.n	80054ce <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80053f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	da11      	bge.n	8005422 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80053fe:	7bbb      	ldrb	r3, [r7, #14]
 8005400:	f003 020f 	and.w	r2, r3, #15
 8005404:	6879      	ldr	r1, [r7, #4]
 8005406:	4613      	mov	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	440b      	add	r3, r1
 8005410:	3323      	adds	r3, #35	@ 0x23
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d117      	bne.n	8005448 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8005418:	6839      	ldr	r1, [r7, #0]
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fbb1 	bl	8005b82 <USBD_CtlError>
                  break;
 8005420:	e055      	b.n	80054ce <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005422:	7bbb      	ldrb	r3, [r7, #14]
 8005424:	f003 020f 	and.w	r2, r3, #15
 8005428:	6879      	ldr	r1, [r7, #4]
 800542a:	4613      	mov	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	440b      	add	r3, r1
 8005434:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d104      	bne.n	8005448 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800543e:	6839      	ldr	r1, [r7, #0]
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 fb9e 	bl	8005b82 <USBD_CtlError>
                  break;
 8005446:	e042      	b.n	80054ce <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005448:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800544c:	2b00      	cmp	r3, #0
 800544e:	da0b      	bge.n	8005468 <USBD_StdEPReq+0x2b4>
 8005450:	7bbb      	ldrb	r3, [r7, #14]
 8005452:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005456:	4613      	mov	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	3310      	adds	r3, #16
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	4413      	add	r3, r2
 8005464:	3304      	adds	r3, #4
 8005466:	e00b      	b.n	8005480 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005468:	7bbb      	ldrb	r3, [r7, #14]
 800546a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800546e:	4613      	mov	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	4413      	add	r3, r2
 800547e:	3304      	adds	r3, #4
 8005480:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005482:	7bbb      	ldrb	r3, [r7, #14]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <USBD_StdEPReq+0x2da>
 8005488:	7bbb      	ldrb	r3, [r7, #14]
 800548a:	2b80      	cmp	r3, #128	@ 0x80
 800548c:	d103      	bne.n	8005496 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2200      	movs	r2, #0
 8005492:	739a      	strb	r2, [r3, #14]
 8005494:	e00e      	b.n	80054b4 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005496:	7bbb      	ldrb	r3, [r7, #14]
 8005498:	4619      	mov	r1, r3
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 ffb0 	bl	8006400 <USBD_LL_IsStallEP>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	2201      	movs	r2, #1
 80054aa:	739a      	strb	r2, [r3, #14]
 80054ac:	e002      	b.n	80054b4 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2200      	movs	r2, #0
 80054b2:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	330e      	adds	r3, #14
 80054b8:	2202      	movs	r2, #2
 80054ba:	4619      	mov	r1, r3
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 fbdd 	bl	8005c7c <USBD_CtlSendData>
              break;
 80054c2:	e004      	b.n	80054ce <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 80054c4:	6839      	ldr	r1, [r7, #0]
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fb5b 	bl	8005b82 <USBD_CtlError>
              break;
 80054cc:	bf00      	nop
          }
          break;
 80054ce:	e004      	b.n	80054da <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 80054d0:	6839      	ldr	r1, [r7, #0]
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 fb55 	bl	8005b82 <USBD_CtlError>
          break;
 80054d8:	bf00      	nop
      }
      break;
 80054da:	e005      	b.n	80054e8 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80054dc:	6839      	ldr	r1, [r7, #0]
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fb4f 	bl	8005b82 <USBD_CtlError>
      break;
 80054e4:	e000      	b.n	80054e8 <USBD_StdEPReq+0x334>
      break;
 80054e6:	bf00      	nop
  }

  return ret;
 80054e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
	...

080054f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80054fe:	2300      	movs	r3, #0
 8005500:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005502:	2300      	movs	r3, #0
 8005504:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	885b      	ldrh	r3, [r3, #2]
 800550e:	0a1b      	lsrs	r3, r3, #8
 8005510:	b29b      	uxth	r3, r3
 8005512:	3b01      	subs	r3, #1
 8005514:	2b06      	cmp	r3, #6
 8005516:	f200 8128 	bhi.w	800576a <USBD_GetDescriptor+0x276>
 800551a:	a201      	add	r2, pc, #4	@ (adr r2, 8005520 <USBD_GetDescriptor+0x2c>)
 800551c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005520:	0800553d 	.word	0x0800553d
 8005524:	08005555 	.word	0x08005555
 8005528:	08005595 	.word	0x08005595
 800552c:	0800576b 	.word	0x0800576b
 8005530:	0800576b 	.word	0x0800576b
 8005534:	0800570b 	.word	0x0800570b
 8005538:	08005737 	.word	0x08005737
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	7c12      	ldrb	r2, [r2, #16]
 8005548:	f107 0108 	add.w	r1, r7, #8
 800554c:	4610      	mov	r0, r2
 800554e:	4798      	blx	r3
 8005550:	60f8      	str	r0, [r7, #12]
      break;
 8005552:	e112      	b.n	800577a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	7c1b      	ldrb	r3, [r3, #16]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10d      	bne.n	8005578 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005564:	f107 0208 	add.w	r2, r7, #8
 8005568:	4610      	mov	r0, r2
 800556a:	4798      	blx	r3
 800556c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3301      	adds	r3, #1
 8005572:	2202      	movs	r2, #2
 8005574:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005576:	e100      	b.n	800577a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800557e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005580:	f107 0208 	add.w	r2, r7, #8
 8005584:	4610      	mov	r0, r2
 8005586:	4798      	blx	r3
 8005588:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	3301      	adds	r3, #1
 800558e:	2202      	movs	r2, #2
 8005590:	701a      	strb	r2, [r3, #0]
      break;
 8005592:	e0f2      	b.n	800577a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	885b      	ldrh	r3, [r3, #2]
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b05      	cmp	r3, #5
 800559c:	f200 80ac 	bhi.w	80056f8 <USBD_GetDescriptor+0x204>
 80055a0:	a201      	add	r2, pc, #4	@ (adr r2, 80055a8 <USBD_GetDescriptor+0xb4>)
 80055a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a6:	bf00      	nop
 80055a8:	080055c1 	.word	0x080055c1
 80055ac:	080055f5 	.word	0x080055f5
 80055b0:	08005629 	.word	0x08005629
 80055b4:	0800565d 	.word	0x0800565d
 80055b8:	08005691 	.word	0x08005691
 80055bc:	080056c5 	.word	0x080056c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00b      	beq.n	80055e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	7c12      	ldrb	r2, [r2, #16]
 80055d8:	f107 0108 	add.w	r1, r7, #8
 80055dc:	4610      	mov	r0, r2
 80055de:	4798      	blx	r3
 80055e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80055e2:	e091      	b.n	8005708 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80055e4:	6839      	ldr	r1, [r7, #0]
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 facb 	bl	8005b82 <USBD_CtlError>
            err++;
 80055ec:	7afb      	ldrb	r3, [r7, #11]
 80055ee:	3301      	adds	r3, #1
 80055f0:	72fb      	strb	r3, [r7, #11]
          break;
 80055f2:	e089      	b.n	8005708 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00b      	beq.n	8005618 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	7c12      	ldrb	r2, [r2, #16]
 800560c:	f107 0108 	add.w	r1, r7, #8
 8005610:	4610      	mov	r0, r2
 8005612:	4798      	blx	r3
 8005614:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005616:	e077      	b.n	8005708 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005618:	6839      	ldr	r1, [r7, #0]
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 fab1 	bl	8005b82 <USBD_CtlError>
            err++;
 8005620:	7afb      	ldrb	r3, [r7, #11]
 8005622:	3301      	adds	r3, #1
 8005624:	72fb      	strb	r3, [r7, #11]
          break;
 8005626:	e06f      	b.n	8005708 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00b      	beq.n	800564c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	7c12      	ldrb	r2, [r2, #16]
 8005640:	f107 0108 	add.w	r1, r7, #8
 8005644:	4610      	mov	r0, r2
 8005646:	4798      	blx	r3
 8005648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800564a:	e05d      	b.n	8005708 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800564c:	6839      	ldr	r1, [r7, #0]
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 fa97 	bl	8005b82 <USBD_CtlError>
            err++;
 8005654:	7afb      	ldrb	r3, [r7, #11]
 8005656:	3301      	adds	r3, #1
 8005658:	72fb      	strb	r3, [r7, #11]
          break;
 800565a:	e055      	b.n	8005708 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00b      	beq.n	8005680 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	7c12      	ldrb	r2, [r2, #16]
 8005674:	f107 0108 	add.w	r1, r7, #8
 8005678:	4610      	mov	r0, r2
 800567a:	4798      	blx	r3
 800567c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800567e:	e043      	b.n	8005708 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005680:	6839      	ldr	r1, [r7, #0]
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fa7d 	bl	8005b82 <USBD_CtlError>
            err++;
 8005688:	7afb      	ldrb	r3, [r7, #11]
 800568a:	3301      	adds	r3, #1
 800568c:	72fb      	strb	r3, [r7, #11]
          break;
 800568e:	e03b      	b.n	8005708 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00b      	beq.n	80056b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	7c12      	ldrb	r2, [r2, #16]
 80056a8:	f107 0108 	add.w	r1, r7, #8
 80056ac:	4610      	mov	r0, r2
 80056ae:	4798      	blx	r3
 80056b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80056b2:	e029      	b.n	8005708 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80056b4:	6839      	ldr	r1, [r7, #0]
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fa63 	bl	8005b82 <USBD_CtlError>
            err++;
 80056bc:	7afb      	ldrb	r3, [r7, #11]
 80056be:	3301      	adds	r3, #1
 80056c0:	72fb      	strb	r3, [r7, #11]
          break;
 80056c2:	e021      	b.n	8005708 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00b      	beq.n	80056e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	7c12      	ldrb	r2, [r2, #16]
 80056dc:	f107 0108 	add.w	r1, r7, #8
 80056e0:	4610      	mov	r0, r2
 80056e2:	4798      	blx	r3
 80056e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80056e6:	e00f      	b.n	8005708 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80056e8:	6839      	ldr	r1, [r7, #0]
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fa49 	bl	8005b82 <USBD_CtlError>
            err++;
 80056f0:	7afb      	ldrb	r3, [r7, #11]
 80056f2:	3301      	adds	r3, #1
 80056f4:	72fb      	strb	r3, [r7, #11]
          break;
 80056f6:	e007      	b.n	8005708 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80056f8:	6839      	ldr	r1, [r7, #0]
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fa41 	bl	8005b82 <USBD_CtlError>
          err++;
 8005700:	7afb      	ldrb	r3, [r7, #11]
 8005702:	3301      	adds	r3, #1
 8005704:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005706:	bf00      	nop
      }
      break;
 8005708:	e037      	b.n	800577a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	7c1b      	ldrb	r3, [r3, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d109      	bne.n	8005726 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800571a:	f107 0208 	add.w	r2, r7, #8
 800571e:	4610      	mov	r0, r2
 8005720:	4798      	blx	r3
 8005722:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005724:	e029      	b.n	800577a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005726:	6839      	ldr	r1, [r7, #0]
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 fa2a 	bl	8005b82 <USBD_CtlError>
        err++;
 800572e:	7afb      	ldrb	r3, [r7, #11]
 8005730:	3301      	adds	r3, #1
 8005732:	72fb      	strb	r3, [r7, #11]
      break;
 8005734:	e021      	b.n	800577a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	7c1b      	ldrb	r3, [r3, #16]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10d      	bne.n	800575a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005746:	f107 0208 	add.w	r2, r7, #8
 800574a:	4610      	mov	r0, r2
 800574c:	4798      	blx	r3
 800574e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	3301      	adds	r3, #1
 8005754:	2207      	movs	r2, #7
 8005756:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005758:	e00f      	b.n	800577a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800575a:	6839      	ldr	r1, [r7, #0]
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 fa10 	bl	8005b82 <USBD_CtlError>
        err++;
 8005762:	7afb      	ldrb	r3, [r7, #11]
 8005764:	3301      	adds	r3, #1
 8005766:	72fb      	strb	r3, [r7, #11]
      break;
 8005768:	e007      	b.n	800577a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800576a:	6839      	ldr	r1, [r7, #0]
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 fa08 	bl	8005b82 <USBD_CtlError>
      err++;
 8005772:	7afb      	ldrb	r3, [r7, #11]
 8005774:	3301      	adds	r3, #1
 8005776:	72fb      	strb	r3, [r7, #11]
      break;
 8005778:	bf00      	nop
  }

  if (err != 0U)
 800577a:	7afb      	ldrb	r3, [r7, #11]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d11e      	bne.n	80057be <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	88db      	ldrh	r3, [r3, #6]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d016      	beq.n	80057b6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005788:	893b      	ldrh	r3, [r7, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00e      	beq.n	80057ac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	88da      	ldrh	r2, [r3, #6]
 8005792:	893b      	ldrh	r3, [r7, #8]
 8005794:	4293      	cmp	r3, r2
 8005796:	bf28      	it	cs
 8005798:	4613      	movcs	r3, r2
 800579a:	b29b      	uxth	r3, r3
 800579c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800579e:	893b      	ldrh	r3, [r7, #8]
 80057a0:	461a      	mov	r2, r3
 80057a2:	68f9      	ldr	r1, [r7, #12]
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 fa69 	bl	8005c7c <USBD_CtlSendData>
 80057aa:	e009      	b.n	80057c0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80057ac:	6839      	ldr	r1, [r7, #0]
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f9e7 	bl	8005b82 <USBD_CtlError>
 80057b4:	e004      	b.n	80057c0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 faa0 	bl	8005cfc <USBD_CtlSendStatus>
 80057bc:	e000      	b.n	80057c0 <USBD_GetDescriptor+0x2cc>
    return;
 80057be:	bf00      	nop
  }
}
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop

080057c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	889b      	ldrh	r3, [r3, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d131      	bne.n	800583e <USBD_SetAddress+0x76>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	88db      	ldrh	r3, [r3, #6]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d12d      	bne.n	800583e <USBD_SetAddress+0x76>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	885b      	ldrh	r3, [r3, #2]
 80057e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80057e8:	d829      	bhi.n	800583e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	885b      	ldrh	r3, [r3, #2]
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b03      	cmp	r3, #3
 8005800:	d104      	bne.n	800580c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005802:	6839      	ldr	r1, [r7, #0]
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f9bc 	bl	8005b82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800580a:	e01d      	b.n	8005848 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	7bfa      	ldrb	r2, [r7, #15]
 8005810:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005814:	7bfb      	ldrb	r3, [r7, #15]
 8005816:	4619      	mov	r1, r3
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 fe1d 	bl	8006458 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fa6c 	bl	8005cfc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d004      	beq.n	8005834 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2202      	movs	r2, #2
 800582e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005832:	e009      	b.n	8005848 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800583c:	e004      	b.n	8005848 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800583e:	6839      	ldr	r1, [r7, #0]
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 f99e 	bl	8005b82 <USBD_CtlError>
  }
}
 8005846:	bf00      	nop
 8005848:	bf00      	nop
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800585a:	2300      	movs	r3, #0
 800585c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	885b      	ldrh	r3, [r3, #2]
 8005862:	b2da      	uxtb	r2, r3
 8005864:	4b4e      	ldr	r3, [pc, #312]	@ (80059a0 <USBD_SetConfig+0x150>)
 8005866:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005868:	4b4d      	ldr	r3, [pc, #308]	@ (80059a0 <USBD_SetConfig+0x150>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d905      	bls.n	800587c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005870:	6839      	ldr	r1, [r7, #0]
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f985 	bl	8005b82 <USBD_CtlError>
    return USBD_FAIL;
 8005878:	2303      	movs	r3, #3
 800587a:	e08c      	b.n	8005996 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b02      	cmp	r3, #2
 8005886:	d002      	beq.n	800588e <USBD_SetConfig+0x3e>
 8005888:	2b03      	cmp	r3, #3
 800588a:	d029      	beq.n	80058e0 <USBD_SetConfig+0x90>
 800588c:	e075      	b.n	800597a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800588e:	4b44      	ldr	r3, [pc, #272]	@ (80059a0 <USBD_SetConfig+0x150>)
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d020      	beq.n	80058d8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005896:	4b42      	ldr	r3, [pc, #264]	@ (80059a0 <USBD_SetConfig+0x150>)
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	461a      	mov	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80058a0:	4b3f      	ldr	r3, [pc, #252]	@ (80059a0 <USBD_SetConfig+0x150>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	4619      	mov	r1, r3
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fe ffcd 	bl	8004846 <USBD_SetClassConfig>
 80058ac:	4603      	mov	r3, r0
 80058ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80058b0:	7bfb      	ldrb	r3, [r7, #15]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d008      	beq.n	80058c8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80058b6:	6839      	ldr	r1, [r7, #0]
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f962 	bl	8005b82 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2202      	movs	r2, #2
 80058c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80058c6:	e065      	b.n	8005994 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 fa17 	bl	8005cfc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2203      	movs	r2, #3
 80058d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80058d6:	e05d      	b.n	8005994 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fa0f 	bl	8005cfc <USBD_CtlSendStatus>
      break;
 80058de:	e059      	b.n	8005994 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80058e0:	4b2f      	ldr	r3, [pc, #188]	@ (80059a0 <USBD_SetConfig+0x150>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d112      	bne.n	800590e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2202      	movs	r2, #2
 80058ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80058f0:	4b2b      	ldr	r3, [pc, #172]	@ (80059a0 <USBD_SetConfig+0x150>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	461a      	mov	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80058fa:	4b29      	ldr	r3, [pc, #164]	@ (80059a0 <USBD_SetConfig+0x150>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	4619      	mov	r1, r3
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f7fe ffbc 	bl	800487e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f9f8 	bl	8005cfc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800590c:	e042      	b.n	8005994 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800590e:	4b24      	ldr	r3, [pc, #144]	@ (80059a0 <USBD_SetConfig+0x150>)
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	429a      	cmp	r2, r3
 800591a:	d02a      	beq.n	8005972 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	b2db      	uxtb	r3, r3
 8005922:	4619      	mov	r1, r3
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7fe ffaa 	bl	800487e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800592a:	4b1d      	ldr	r3, [pc, #116]	@ (80059a0 <USBD_SetConfig+0x150>)
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	461a      	mov	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005934:	4b1a      	ldr	r3, [pc, #104]	@ (80059a0 <USBD_SetConfig+0x150>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	4619      	mov	r1, r3
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7fe ff83 	bl	8004846 <USBD_SetClassConfig>
 8005940:	4603      	mov	r3, r0
 8005942:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005944:	7bfb      	ldrb	r3, [r7, #15]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00f      	beq.n	800596a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800594a:	6839      	ldr	r1, [r7, #0]
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f918 	bl	8005b82 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	b2db      	uxtb	r3, r3
 8005958:	4619      	mov	r1, r3
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7fe ff8f 	bl	800487e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005968:	e014      	b.n	8005994 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f9c6 	bl	8005cfc <USBD_CtlSendStatus>
      break;
 8005970:	e010      	b.n	8005994 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f9c2 	bl	8005cfc <USBD_CtlSendStatus>
      break;
 8005978:	e00c      	b.n	8005994 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800597a:	6839      	ldr	r1, [r7, #0]
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f900 	bl	8005b82 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005982:	4b07      	ldr	r3, [pc, #28]	@ (80059a0 <USBD_SetConfig+0x150>)
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	4619      	mov	r1, r3
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7fe ff78 	bl	800487e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800598e:	2303      	movs	r3, #3
 8005990:	73fb      	strb	r3, [r7, #15]
      break;
 8005992:	bf00      	nop
  }

  return ret;
 8005994:	7bfb      	ldrb	r3, [r7, #15]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	200001b4 	.word	0x200001b4

080059a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	88db      	ldrh	r3, [r3, #6]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d004      	beq.n	80059c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80059b6:	6839      	ldr	r1, [r7, #0]
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f8e2 	bl	8005b82 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80059be:	e023      	b.n	8005a08 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	dc02      	bgt.n	80059d2 <USBD_GetConfig+0x2e>
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	dc03      	bgt.n	80059d8 <USBD_GetConfig+0x34>
 80059d0:	e015      	b.n	80059fe <USBD_GetConfig+0x5a>
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d00b      	beq.n	80059ee <USBD_GetConfig+0x4a>
 80059d6:	e012      	b.n	80059fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	3308      	adds	r3, #8
 80059e2:	2201      	movs	r2, #1
 80059e4:	4619      	mov	r1, r3
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f948 	bl	8005c7c <USBD_CtlSendData>
        break;
 80059ec:	e00c      	b.n	8005a08 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	3304      	adds	r3, #4
 80059f2:	2201      	movs	r2, #1
 80059f4:	4619      	mov	r1, r3
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f940 	bl	8005c7c <USBD_CtlSendData>
        break;
 80059fc:	e004      	b.n	8005a08 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80059fe:	6839      	ldr	r1, [r7, #0]
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f8be 	bl	8005b82 <USBD_CtlError>
        break;
 8005a06:	bf00      	nop
}
 8005a08:	bf00      	nop
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	3b01      	subs	r3, #1
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d81e      	bhi.n	8005a66 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	88db      	ldrh	r3, [r3, #6]
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d004      	beq.n	8005a3a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005a30:	6839      	ldr	r1, [r7, #0]
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f8a5 	bl	8005b82 <USBD_CtlError>
        break;
 8005a38:	e01a      	b.n	8005a70 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d005      	beq.n	8005a56 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f043 0202 	orr.w	r2, r3, #2
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	330c      	adds	r3, #12
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f90c 	bl	8005c7c <USBD_CtlSendData>
      break;
 8005a64:	e004      	b.n	8005a70 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005a66:	6839      	ldr	r1, [r7, #0]
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 f88a 	bl	8005b82 <USBD_CtlError>
      break;
 8005a6e:	bf00      	nop
  }
}
 8005a70:	bf00      	nop
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	885b      	ldrh	r3, [r3, #2]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d107      	bne.n	8005a9a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f932 	bl	8005cfc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005a98:	e013      	b.n	8005ac2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	885b      	ldrh	r3, [r3, #2]
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d10b      	bne.n	8005aba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	889b      	ldrh	r3, [r3, #4]
 8005aa6:	0a1b      	lsrs	r3, r3, #8
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f922 	bl	8005cfc <USBD_CtlSendStatus>
}
 8005ab8:	e003      	b.n	8005ac2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005aba:	6839      	ldr	r1, [r7, #0]
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f860 	bl	8005b82 <USBD_CtlError>
}
 8005ac2:	bf00      	nop
 8005ac4:	3708      	adds	r7, #8
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b082      	sub	sp, #8
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	3b01      	subs	r3, #1
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d80b      	bhi.n	8005afa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	885b      	ldrh	r3, [r3, #2]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d10c      	bne.n	8005b04 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f902 	bl	8005cfc <USBD_CtlSendStatus>
      }
      break;
 8005af8:	e004      	b.n	8005b04 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005afa:	6839      	ldr	r1, [r7, #0]
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f840 	bl	8005b82 <USBD_CtlError>
      break;
 8005b02:	e000      	b.n	8005b06 <USBD_ClrFeature+0x3c>
      break;
 8005b04:	bf00      	nop
  }
}
 8005b06:	bf00      	nop
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b084      	sub	sp, #16
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	781a      	ldrb	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	3301      	adds	r3, #1
 8005b28:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	781a      	ldrb	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	3301      	adds	r3, #1
 8005b36:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f7ff fa3d 	bl	8004fb8 <SWAPBYTE>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	461a      	mov	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f7ff fa30 	bl	8004fb8 <SWAPBYTE>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	3301      	adds	r3, #1
 8005b64:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f7ff fa23 	bl	8004fb8 <SWAPBYTE>
 8005b72:	4603      	mov	r3, r0
 8005b74:	461a      	mov	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	80da      	strh	r2, [r3, #6]
}
 8005b7a:	bf00      	nop
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b082      	sub	sp, #8
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b8c:	2180      	movs	r1, #128	@ 0x80
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fbf8 	bl	8006384 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005b94:	2100      	movs	r1, #0
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fbf4 	bl	8006384 <USBD_LL_StallEP>
}
 8005b9c:	bf00      	nop
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d042      	beq.n	8005c40 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8005bbe:	6938      	ldr	r0, [r7, #16]
 8005bc0:	f000 f842 	bl	8005c48 <USBD_GetLen>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bce:	d808      	bhi.n	8005be2 <USBD_GetString+0x3e>
 8005bd0:	6938      	ldr	r0, [r7, #16]
 8005bd2:	f000 f839 	bl	8005c48 <USBD_GetLen>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	3301      	adds	r3, #1
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	005b      	lsls	r3, r3, #1
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	e001      	b.n	8005be6 <USBD_GetString+0x42>
 8005be2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005bea:	7dfb      	ldrb	r3, [r7, #23]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	4413      	add	r3, r2
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	7812      	ldrb	r2, [r2, #0]
 8005bf4:	701a      	strb	r2, [r3, #0]
  idx++;
 8005bf6:	7dfb      	ldrb	r3, [r7, #23]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005bfc:	7dfb      	ldrb	r3, [r7, #23]
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	4413      	add	r3, r2
 8005c02:	2203      	movs	r2, #3
 8005c04:	701a      	strb	r2, [r3, #0]
  idx++;
 8005c06:	7dfb      	ldrb	r3, [r7, #23]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005c0c:	e013      	b.n	8005c36 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8005c0e:	7dfb      	ldrb	r3, [r7, #23]
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	4413      	add	r3, r2
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	7812      	ldrb	r2, [r2, #0]
 8005c18:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	613b      	str	r3, [r7, #16]
    idx++;
 8005c20:	7dfb      	ldrb	r3, [r7, #23]
 8005c22:	3301      	adds	r3, #1
 8005c24:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005c26:	7dfb      	ldrb	r3, [r7, #23]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	701a      	strb	r2, [r3, #0]
    idx++;
 8005c30:	7dfb      	ldrb	r3, [r7, #23]
 8005c32:	3301      	adds	r3, #1
 8005c34:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1e7      	bne.n	8005c0e <USBD_GetString+0x6a>
 8005c3e:	e000      	b.n	8005c42 <USBD_GetString+0x9e>
    return;
 8005c40:	bf00      	nop
  }
}
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005c58:	e005      	b.n	8005c66 <USBD_GetLen+0x1e>
  {
    len++;
 8005c5a:	7bfb      	ldrb	r3, [r7, #15]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	3301      	adds	r3, #1
 8005c64:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1f5      	bne.n	8005c5a <USBD_GetLen+0x12>
  }

  return len;
 8005c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3714      	adds	r7, #20
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 fbf4 	bl	8006496 <USBD_LL_Transmit>

  return USBD_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	2100      	movs	r1, #0
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f000 fbe3 	bl	8006496 <USBD_LL_Transmit>

  return USBD_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b084      	sub	sp, #16
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	60f8      	str	r0, [r7, #12]
 8005ce2:	60b9      	str	r1, [r7, #8]
 8005ce4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	2100      	movs	r1, #0
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 fbf3 	bl	80064d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2204      	movs	r2, #4
 8005d08:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	2200      	movs	r2, #0
 8005d10:	2100      	movs	r1, #0
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fbbf 	bl	8006496 <USBD_LL_Transmit>

  return USBD_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b082      	sub	sp, #8
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2205      	movs	r2, #5
 8005d2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d32:	2300      	movs	r3, #0
 8005d34:	2200      	movs	r2, #0
 8005d36:	2100      	movs	r1, #0
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fbcd 	bl	80064d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	490e      	ldr	r1, [pc, #56]	@ (8005d88 <MX_USB_DEVICE_Init+0x40>)
 8005d50:	480e      	ldr	r0, [pc, #56]	@ (8005d8c <MX_USB_DEVICE_Init+0x44>)
 8005d52:	f7fe fcfb 	bl	800474c <USBD_Init>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005d5c:	f7fa fcbc 	bl	80006d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8005d60:	490b      	ldr	r1, [pc, #44]	@ (8005d90 <MX_USB_DEVICE_Init+0x48>)
 8005d62:	480a      	ldr	r0, [pc, #40]	@ (8005d8c <MX_USB_DEVICE_Init+0x44>)
 8005d64:	f7fe fd22 	bl	80047ac <USBD_RegisterClass>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005d6e:	f7fa fcb3 	bl	80006d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005d72:	4806      	ldr	r0, [pc, #24]	@ (8005d8c <MX_USB_DEVICE_Init+0x44>)
 8005d74:	f7fe fd50 	bl	8004818 <USBD_Start>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8005d7e:	f7fa fcab 	bl	80006d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005d82:	bf00      	nop
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	2000013c 	.word	0x2000013c
 8005d8c:	200001b8 	.word	0x200001b8
 8005d90:	2000000c 	.word	0x2000000c

08005d94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	6039      	str	r1, [r7, #0]
 8005d9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	2212      	movs	r2, #18
 8005da4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005da6:	4b03      	ldr	r3, [pc, #12]	@ (8005db4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	20000158 	.word	0x20000158

08005db8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	6039      	str	r1, [r7, #0]
 8005dc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	2204      	movs	r2, #4
 8005dc8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005dca:	4b03      	ldr	r3, [pc, #12]	@ (8005dd8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	2000016c 	.word	0x2000016c

08005ddc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	4603      	mov	r3, r0
 8005de4:	6039      	str	r1, [r7, #0]
 8005de6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005de8:	79fb      	ldrb	r3, [r7, #7]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d105      	bne.n	8005dfa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005dee:	683a      	ldr	r2, [r7, #0]
 8005df0:	4907      	ldr	r1, [pc, #28]	@ (8005e10 <USBD_FS_ProductStrDescriptor+0x34>)
 8005df2:	4808      	ldr	r0, [pc, #32]	@ (8005e14 <USBD_FS_ProductStrDescriptor+0x38>)
 8005df4:	f7ff fed6 	bl	8005ba4 <USBD_GetString>
 8005df8:	e004      	b.n	8005e04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	4904      	ldr	r1, [pc, #16]	@ (8005e10 <USBD_FS_ProductStrDescriptor+0x34>)
 8005dfe:	4805      	ldr	r0, [pc, #20]	@ (8005e14 <USBD_FS_ProductStrDescriptor+0x38>)
 8005e00:	f7ff fed0 	bl	8005ba4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e04:	4b02      	ldr	r3, [pc, #8]	@ (8005e10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3708      	adds	r7, #8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	20000494 	.word	0x20000494
 8005e14:	08006614 	.word	0x08006614

08005e18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	4603      	mov	r3, r0
 8005e20:	6039      	str	r1, [r7, #0]
 8005e22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005e24:	683a      	ldr	r2, [r7, #0]
 8005e26:	4904      	ldr	r1, [pc, #16]	@ (8005e38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005e28:	4804      	ldr	r0, [pc, #16]	@ (8005e3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005e2a:	f7ff febb 	bl	8005ba4 <USBD_GetString>
  return USBD_StrDesc;
 8005e2e:	4b02      	ldr	r3, [pc, #8]	@ (8005e38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	20000494 	.word	0x20000494
 8005e3c:	0800662c 	.word	0x0800662c

08005e40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	4603      	mov	r3, r0
 8005e48:	6039      	str	r1, [r7, #0]
 8005e4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	221a      	movs	r2, #26
 8005e50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005e52:	f000 f843 	bl	8005edc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005e56:	4b02      	ldr	r3, [pc, #8]	@ (8005e60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	20000170 	.word	0x20000170

08005e64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	6039      	str	r1, [r7, #0]
 8005e6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005e70:	79fb      	ldrb	r3, [r7, #7]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d105      	bne.n	8005e82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	4907      	ldr	r1, [pc, #28]	@ (8005e98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005e7a:	4808      	ldr	r0, [pc, #32]	@ (8005e9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8005e7c:	f7ff fe92 	bl	8005ba4 <USBD_GetString>
 8005e80:	e004      	b.n	8005e8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	4904      	ldr	r1, [pc, #16]	@ (8005e98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005e86:	4805      	ldr	r0, [pc, #20]	@ (8005e9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8005e88:	f7ff fe8c 	bl	8005ba4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e8c:	4b02      	ldr	r3, [pc, #8]	@ (8005e98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	20000494 	.word	0x20000494
 8005e9c:	08006640 	.word	0x08006640

08005ea0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	6039      	str	r1, [r7, #0]
 8005eaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005eac:	79fb      	ldrb	r3, [r7, #7]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d105      	bne.n	8005ebe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	4907      	ldr	r1, [pc, #28]	@ (8005ed4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005eb6:	4808      	ldr	r0, [pc, #32]	@ (8005ed8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005eb8:	f7ff fe74 	bl	8005ba4 <USBD_GetString>
 8005ebc:	e004      	b.n	8005ec8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	4904      	ldr	r1, [pc, #16]	@ (8005ed4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005ec2:	4805      	ldr	r0, [pc, #20]	@ (8005ed8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005ec4:	f7ff fe6e 	bl	8005ba4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005ec8:	4b02      	ldr	r3, [pc, #8]	@ (8005ed4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3708      	adds	r7, #8
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	20000494 	.word	0x20000494
 8005ed8:	0800664c 	.word	0x0800664c

08005edc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8005f20 <Get_SerialNum+0x44>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8005f24 <Get_SerialNum+0x48>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005eee:	4b0e      	ldr	r3, [pc, #56]	@ (8005f28 <Get_SerialNum+0x4c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4413      	add	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d009      	beq.n	8005f16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005f02:	2208      	movs	r2, #8
 8005f04:	4909      	ldr	r1, [pc, #36]	@ (8005f2c <Get_SerialNum+0x50>)
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 f814 	bl	8005f34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005f0c:	2204      	movs	r2, #4
 8005f0e:	4908      	ldr	r1, [pc, #32]	@ (8005f30 <Get_SerialNum+0x54>)
 8005f10:	68b8      	ldr	r0, [r7, #8]
 8005f12:	f000 f80f 	bl	8005f34 <IntToUnicode>
  }
}
 8005f16:	bf00      	nop
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	1fff7a10 	.word	0x1fff7a10
 8005f24:	1fff7a14 	.word	0x1fff7a14
 8005f28:	1fff7a18 	.word	0x1fff7a18
 8005f2c:	20000172 	.word	0x20000172
 8005f30:	20000182 	.word	0x20000182

08005f34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005f42:	2300      	movs	r3, #0
 8005f44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005f46:	2300      	movs	r3, #0
 8005f48:	75fb      	strb	r3, [r7, #23]
 8005f4a:	e027      	b.n	8005f9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	0f1b      	lsrs	r3, r3, #28
 8005f50:	2b09      	cmp	r3, #9
 8005f52:	d80b      	bhi.n	8005f6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	0f1b      	lsrs	r3, r3, #28
 8005f58:	b2da      	uxtb	r2, r3
 8005f5a:	7dfb      	ldrb	r3, [r7, #23]
 8005f5c:	005b      	lsls	r3, r3, #1
 8005f5e:	4619      	mov	r1, r3
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	440b      	add	r3, r1
 8005f64:	3230      	adds	r2, #48	@ 0x30
 8005f66:	b2d2      	uxtb	r2, r2
 8005f68:	701a      	strb	r2, [r3, #0]
 8005f6a:	e00a      	b.n	8005f82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	0f1b      	lsrs	r3, r3, #28
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	7dfb      	ldrb	r3, [r7, #23]
 8005f74:	005b      	lsls	r3, r3, #1
 8005f76:	4619      	mov	r1, r3
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	440b      	add	r3, r1
 8005f7c:	3237      	adds	r2, #55	@ 0x37
 8005f7e:	b2d2      	uxtb	r2, r2
 8005f80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	011b      	lsls	r3, r3, #4
 8005f86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005f88:	7dfb      	ldrb	r3, [r7, #23]
 8005f8a:	005b      	lsls	r3, r3, #1
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	4413      	add	r3, r2
 8005f92:	2200      	movs	r2, #0
 8005f94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005f96:	7dfb      	ldrb	r3, [r7, #23]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	75fb      	strb	r3, [r7, #23]
 8005f9c:	7dfa      	ldrb	r2, [r7, #23]
 8005f9e:	79fb      	ldrb	r3, [r7, #7]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d3d3      	bcc.n	8005f4c <IntToUnicode+0x18>
  }
}
 8005fa4:	bf00      	nop
 8005fa6:	bf00      	nop
 8005fa8:	371c      	adds	r7, #28
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
	...

08005fb4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b08a      	sub	sp, #40	@ 0x28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fbc:	f107 0314 	add.w	r3, r7, #20
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	605a      	str	r2, [r3, #4]
 8005fc6:	609a      	str	r2, [r3, #8]
 8005fc8:	60da      	str	r2, [r3, #12]
 8005fca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fd4:	d13a      	bne.n	800604c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	613b      	str	r3, [r7, #16]
 8005fda:	4b1e      	ldr	r3, [pc, #120]	@ (8006054 <HAL_PCD_MspInit+0xa0>)
 8005fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fde:	4a1d      	ldr	r2, [pc, #116]	@ (8006054 <HAL_PCD_MspInit+0xa0>)
 8005fe0:	f043 0301 	orr.w	r3, r3, #1
 8005fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8006054 <HAL_PCD_MspInit+0xa0>)
 8005fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	613b      	str	r3, [r7, #16]
 8005ff0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005ff2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006000:	2303      	movs	r3, #3
 8006002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006004:	230a      	movs	r3, #10
 8006006:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006008:	f107 0314 	add.w	r3, r7, #20
 800600c:	4619      	mov	r1, r3
 800600e:	4812      	ldr	r0, [pc, #72]	@ (8006058 <HAL_PCD_MspInit+0xa4>)
 8006010:	f7fa fdae 	bl	8000b70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006014:	4b0f      	ldr	r3, [pc, #60]	@ (8006054 <HAL_PCD_MspInit+0xa0>)
 8006016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006018:	4a0e      	ldr	r2, [pc, #56]	@ (8006054 <HAL_PCD_MspInit+0xa0>)
 800601a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800601e:	6353      	str	r3, [r2, #52]	@ 0x34
 8006020:	2300      	movs	r3, #0
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	4b0b      	ldr	r3, [pc, #44]	@ (8006054 <HAL_PCD_MspInit+0xa0>)
 8006026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006028:	4a0a      	ldr	r2, [pc, #40]	@ (8006054 <HAL_PCD_MspInit+0xa0>)
 800602a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800602e:	6453      	str	r3, [r2, #68]	@ 0x44
 8006030:	4b08      	ldr	r3, [pc, #32]	@ (8006054 <HAL_PCD_MspInit+0xa0>)
 8006032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006034:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800603c:	2200      	movs	r2, #0
 800603e:	2100      	movs	r1, #0
 8006040:	2043      	movs	r0, #67	@ 0x43
 8006042:	f7fa fd5e 	bl	8000b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006046:	2043      	movs	r0, #67	@ 0x43
 8006048:	f7fa fd77 	bl	8000b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800604c:	bf00      	nop
 800604e:	3728      	adds	r7, #40	@ 0x28
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	40023800 	.word	0x40023800
 8006058:	40020000 	.word	0x40020000

0800605c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006070:	4619      	mov	r1, r3
 8006072:	4610      	mov	r0, r2
 8006074:	f7fe fc1d 	bl	80048b2 <USBD_LL_SetupStage>
}
 8006078:	bf00      	nop
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	460b      	mov	r3, r1
 800608a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006092:	78fa      	ldrb	r2, [r7, #3]
 8006094:	6879      	ldr	r1, [r7, #4]
 8006096:	4613      	mov	r3, r2
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	4413      	add	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	440b      	add	r3, r1
 80060a0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	78fb      	ldrb	r3, [r7, #3]
 80060a8:	4619      	mov	r1, r3
 80060aa:	f7fe fc57 	bl	800495c <USBD_LL_DataOutStage>
}
 80060ae:	bf00      	nop
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b082      	sub	sp, #8
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	460b      	mov	r3, r1
 80060c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80060c8:	78fa      	ldrb	r2, [r7, #3]
 80060ca:	6879      	ldr	r1, [r7, #4]
 80060cc:	4613      	mov	r3, r2
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	4413      	add	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	440b      	add	r3, r1
 80060d6:	3320      	adds	r3, #32
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	78fb      	ldrb	r3, [r7, #3]
 80060dc:	4619      	mov	r1, r3
 80060de:	f7fe fcf9 	bl	8004ad4 <USBD_LL_DataInStage>
}
 80060e2:	bf00      	nop
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b082      	sub	sp, #8
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fe fe3d 	bl	8004d78 <USBD_LL_SOF>
}
 80060fe:	bf00      	nop
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b084      	sub	sp, #16
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800610e:	2301      	movs	r3, #1
 8006110:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	79db      	ldrb	r3, [r3, #7]
 8006116:	2b02      	cmp	r3, #2
 8006118:	d001      	beq.n	800611e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800611a:	f7fa fadd 	bl	80006d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006124:	7bfa      	ldrb	r2, [r7, #15]
 8006126:	4611      	mov	r1, r2
 8006128:	4618      	mov	r0, r3
 800612a:	f7fe fde1 	bl	8004cf0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006134:	4618      	mov	r0, r3
 8006136:	f7fe fd88 	bl	8004c4a <USBD_LL_Reset>
}
 800613a:	bf00      	nop
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
	...

08006144 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006152:	4618      	mov	r0, r3
 8006154:	f7fe fddc 	bl	8004d10 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	6812      	ldr	r2, [r2, #0]
 8006166:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800616a:	f043 0301 	orr.w	r3, r3, #1
 800616e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	7adb      	ldrb	r3, [r3, #11]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d005      	beq.n	8006184 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006178:	4b04      	ldr	r3, [pc, #16]	@ (800618c <HAL_PCD_SuspendCallback+0x48>)
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	4a03      	ldr	r2, [pc, #12]	@ (800618c <HAL_PCD_SuspendCallback+0x48>)
 800617e:	f043 0306 	orr.w	r3, r3, #6
 8006182:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006184:	bf00      	nop
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	e000ed00 	.word	0xe000ed00

08006190 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fe fdd2 	bl	8004d48 <USBD_LL_Resume>
}
 80061a4:	bf00      	nop
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	460b      	mov	r3, r1
 80061b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80061be:	78fa      	ldrb	r2, [r7, #3]
 80061c0:	4611      	mov	r1, r2
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fe fe2a 	bl	8004e1c <USBD_LL_IsoOUTIncomplete>
}
 80061c8:	bf00      	nop
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	460b      	mov	r3, r1
 80061da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80061e2:	78fa      	ldrb	r2, [r7, #3]
 80061e4:	4611      	mov	r1, r2
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fe fde6 	bl	8004db8 <USBD_LL_IsoINIncomplete>
}
 80061ec:	bf00      	nop
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006202:	4618      	mov	r0, r3
 8006204:	f7fe fe3c 	bl	8004e80 <USBD_LL_DevConnected>
}
 8006208:	bf00      	nop
 800620a:	3708      	adds	r7, #8
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800621e:	4618      	mov	r0, r3
 8006220:	f7fe fe39 	bl	8004e96 <USBD_LL_DevDisconnected>
}
 8006224:	bf00      	nop
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d13c      	bne.n	80062b6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800623c:	4a20      	ldr	r2, [pc, #128]	@ (80062c0 <USBD_LL_Init+0x94>)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a1e      	ldr	r2, [pc, #120]	@ (80062c0 <USBD_LL_Init+0x94>)
 8006248:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800624c:	4b1c      	ldr	r3, [pc, #112]	@ (80062c0 <USBD_LL_Init+0x94>)
 800624e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006252:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006254:	4b1a      	ldr	r3, [pc, #104]	@ (80062c0 <USBD_LL_Init+0x94>)
 8006256:	2204      	movs	r2, #4
 8006258:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800625a:	4b19      	ldr	r3, [pc, #100]	@ (80062c0 <USBD_LL_Init+0x94>)
 800625c:	2202      	movs	r2, #2
 800625e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006260:	4b17      	ldr	r3, [pc, #92]	@ (80062c0 <USBD_LL_Init+0x94>)
 8006262:	2200      	movs	r2, #0
 8006264:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006266:	4b16      	ldr	r3, [pc, #88]	@ (80062c0 <USBD_LL_Init+0x94>)
 8006268:	2202      	movs	r2, #2
 800626a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800626c:	4b14      	ldr	r3, [pc, #80]	@ (80062c0 <USBD_LL_Init+0x94>)
 800626e:	2200      	movs	r2, #0
 8006270:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006272:	4b13      	ldr	r3, [pc, #76]	@ (80062c0 <USBD_LL_Init+0x94>)
 8006274:	2200      	movs	r2, #0
 8006276:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006278:	4b11      	ldr	r3, [pc, #68]	@ (80062c0 <USBD_LL_Init+0x94>)
 800627a:	2200      	movs	r2, #0
 800627c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800627e:	4b10      	ldr	r3, [pc, #64]	@ (80062c0 <USBD_LL_Init+0x94>)
 8006280:	2200      	movs	r2, #0
 8006282:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006284:	4b0e      	ldr	r3, [pc, #56]	@ (80062c0 <USBD_LL_Init+0x94>)
 8006286:	2200      	movs	r2, #0
 8006288:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800628a:	480d      	ldr	r0, [pc, #52]	@ (80062c0 <USBD_LL_Init+0x94>)
 800628c:	f7fa fe0c 	bl	8000ea8 <HAL_PCD_Init>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006296:	f7fa fa1f 	bl	80006d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800629a:	2180      	movs	r1, #128	@ 0x80
 800629c:	4808      	ldr	r0, [pc, #32]	@ (80062c0 <USBD_LL_Init+0x94>)
 800629e:	f7fc f820 	bl	80022e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80062a2:	2240      	movs	r2, #64	@ 0x40
 80062a4:	2100      	movs	r1, #0
 80062a6:	4806      	ldr	r0, [pc, #24]	@ (80062c0 <USBD_LL_Init+0x94>)
 80062a8:	f7fb ffd4 	bl	8002254 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80062ac:	2280      	movs	r2, #128	@ 0x80
 80062ae:	2101      	movs	r1, #1
 80062b0:	4803      	ldr	r0, [pc, #12]	@ (80062c0 <USBD_LL_Init+0x94>)
 80062b2:	f7fb ffcf 	bl	8002254 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	20000694 	.word	0x20000694

080062c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062cc:	2300      	movs	r3, #0
 80062ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062d0:	2300      	movs	r3, #0
 80062d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fa fef3 	bl	80010c6 <HAL_PCD_Start>
 80062e0:	4603      	mov	r3, r0
 80062e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062e4:	7bfb      	ldrb	r3, [r7, #15]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f000 f930 	bl	800654c <USBD_Get_USB_Status>
 80062ec:	4603      	mov	r3, r0
 80062ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80062f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b084      	sub	sp, #16
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
 8006302:	4608      	mov	r0, r1
 8006304:	4611      	mov	r1, r2
 8006306:	461a      	mov	r2, r3
 8006308:	4603      	mov	r3, r0
 800630a:	70fb      	strb	r3, [r7, #3]
 800630c:	460b      	mov	r3, r1
 800630e:	70bb      	strb	r3, [r7, #2]
 8006310:	4613      	mov	r3, r2
 8006312:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006314:	2300      	movs	r3, #0
 8006316:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006318:	2300      	movs	r3, #0
 800631a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006322:	78bb      	ldrb	r3, [r7, #2]
 8006324:	883a      	ldrh	r2, [r7, #0]
 8006326:	78f9      	ldrb	r1, [r7, #3]
 8006328:	f7fb fbc7 	bl	8001aba <HAL_PCD_EP_Open>
 800632c:	4603      	mov	r3, r0
 800632e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006330:	7bfb      	ldrb	r3, [r7, #15]
 8006332:	4618      	mov	r0, r3
 8006334:	f000 f90a 	bl	800654c <USBD_Get_USB_Status>
 8006338:	4603      	mov	r3, r0
 800633a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800633c:	7bbb      	ldrb	r3, [r7, #14]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b084      	sub	sp, #16
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
 800634e:	460b      	mov	r3, r1
 8006350:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006352:	2300      	movs	r3, #0
 8006354:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006356:	2300      	movs	r3, #0
 8006358:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006360:	78fa      	ldrb	r2, [r7, #3]
 8006362:	4611      	mov	r1, r2
 8006364:	4618      	mov	r0, r3
 8006366:	f7fb fc12 	bl	8001b8e <HAL_PCD_EP_Close>
 800636a:	4603      	mov	r3, r0
 800636c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800636e:	7bfb      	ldrb	r3, [r7, #15]
 8006370:	4618      	mov	r0, r3
 8006372:	f000 f8eb 	bl	800654c <USBD_Get_USB_Status>
 8006376:	4603      	mov	r3, r0
 8006378:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800637a:	7bbb      	ldrb	r3, [r7, #14]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	460b      	mov	r3, r1
 800638e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006390:	2300      	movs	r3, #0
 8006392:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006394:	2300      	movs	r3, #0
 8006396:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800639e:	78fa      	ldrb	r2, [r7, #3]
 80063a0:	4611      	mov	r1, r2
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fb fcb2 	bl	8001d0c <HAL_PCD_EP_SetStall>
 80063a8:	4603      	mov	r3, r0
 80063aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80063ac:	7bfb      	ldrb	r3, [r7, #15]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 f8cc 	bl	800654c <USBD_Get_USB_Status>
 80063b4:	4603      	mov	r3, r0
 80063b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80063b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	460b      	mov	r3, r1
 80063cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063ce:	2300      	movs	r3, #0
 80063d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063d2:	2300      	movs	r3, #0
 80063d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80063dc:	78fa      	ldrb	r2, [r7, #3]
 80063de:	4611      	mov	r1, r2
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fb fcf6 	bl	8001dd2 <HAL_PCD_EP_ClrStall>
 80063e6:	4603      	mov	r3, r0
 80063e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f000 f8ad 	bl	800654c <USBD_Get_USB_Status>
 80063f2:	4603      	mov	r3, r0
 80063f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80063f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	460b      	mov	r3, r1
 800640a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006412:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006414:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006418:	2b00      	cmp	r3, #0
 800641a:	da0b      	bge.n	8006434 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800641c:	78fb      	ldrb	r3, [r7, #3]
 800641e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006422:	68f9      	ldr	r1, [r7, #12]
 8006424:	4613      	mov	r3, r2
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	4413      	add	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	440b      	add	r3, r1
 800642e:	3316      	adds	r3, #22
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	e00b      	b.n	800644c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006434:	78fb      	ldrb	r3, [r7, #3]
 8006436:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800643a:	68f9      	ldr	r1, [r7, #12]
 800643c:	4613      	mov	r3, r2
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	4413      	add	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	440b      	add	r3, r1
 8006446:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800644a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800644c:	4618      	mov	r0, r3
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	460b      	mov	r3, r1
 8006462:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006464:	2300      	movs	r3, #0
 8006466:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006468:	2300      	movs	r3, #0
 800646a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006472:	78fa      	ldrb	r2, [r7, #3]
 8006474:	4611      	mov	r1, r2
 8006476:	4618      	mov	r0, r3
 8006478:	f7fb fafb 	bl	8001a72 <HAL_PCD_SetAddress>
 800647c:	4603      	mov	r3, r0
 800647e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006480:	7bfb      	ldrb	r3, [r7, #15]
 8006482:	4618      	mov	r0, r3
 8006484:	f000 f862 	bl	800654c <USBD_Get_USB_Status>
 8006488:	4603      	mov	r3, r0
 800648a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800648c:	7bbb      	ldrb	r3, [r7, #14]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b086      	sub	sp, #24
 800649a:	af00      	add	r7, sp, #0
 800649c:	60f8      	str	r0, [r7, #12]
 800649e:	607a      	str	r2, [r7, #4]
 80064a0:	603b      	str	r3, [r7, #0]
 80064a2:	460b      	mov	r3, r1
 80064a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80064b4:	7af9      	ldrb	r1, [r7, #11]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	f7fb fbed 	bl	8001c98 <HAL_PCD_EP_Transmit>
 80064be:	4603      	mov	r3, r0
 80064c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064c2:	7dfb      	ldrb	r3, [r7, #23]
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 f841 	bl	800654c <USBD_Get_USB_Status>
 80064ca:	4603      	mov	r3, r0
 80064cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80064ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3718      	adds	r7, #24
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	607a      	str	r2, [r7, #4]
 80064e2:	603b      	str	r3, [r7, #0]
 80064e4:	460b      	mov	r3, r1
 80064e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064e8:	2300      	movs	r3, #0
 80064ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064ec:	2300      	movs	r3, #0
 80064ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80064f6:	7af9      	ldrb	r1, [r7, #11]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	f7fb fb91 	bl	8001c22 <HAL_PCD_EP_Receive>
 8006500:	4603      	mov	r3, r0
 8006502:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006504:	7dfb      	ldrb	r3, [r7, #23]
 8006506:	4618      	mov	r0, r3
 8006508:	f000 f820 	bl	800654c <USBD_Get_USB_Status>
 800650c:	4603      	mov	r3, r0
 800650e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006510:	7dbb      	ldrb	r3, [r7, #22]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3718      	adds	r7, #24
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006524:	4b03      	ldr	r3, [pc, #12]	@ (8006534 <USBD_static_malloc+0x18>)
}
 8006526:	4618      	mov	r0, r3
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	20000b78 	.word	0x20000b78

08006538 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]

}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	4603      	mov	r3, r0
 8006554:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800655a:	79fb      	ldrb	r3, [r7, #7]
 800655c:	2b03      	cmp	r3, #3
 800655e:	d817      	bhi.n	8006590 <USBD_Get_USB_Status+0x44>
 8006560:	a201      	add	r2, pc, #4	@ (adr r2, 8006568 <USBD_Get_USB_Status+0x1c>)
 8006562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006566:	bf00      	nop
 8006568:	08006579 	.word	0x08006579
 800656c:	0800657f 	.word	0x0800657f
 8006570:	08006585 	.word	0x08006585
 8006574:	0800658b 	.word	0x0800658b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006578:	2300      	movs	r3, #0
 800657a:	73fb      	strb	r3, [r7, #15]
    break;
 800657c:	e00b      	b.n	8006596 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800657e:	2303      	movs	r3, #3
 8006580:	73fb      	strb	r3, [r7, #15]
    break;
 8006582:	e008      	b.n	8006596 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006584:	2301      	movs	r3, #1
 8006586:	73fb      	strb	r3, [r7, #15]
    break;
 8006588:	e005      	b.n	8006596 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800658a:	2303      	movs	r3, #3
 800658c:	73fb      	strb	r3, [r7, #15]
    break;
 800658e:	e002      	b.n	8006596 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006590:	2303      	movs	r3, #3
 8006592:	73fb      	strb	r3, [r7, #15]
    break;
 8006594:	bf00      	nop
  }
  return usb_status;
 8006596:	7bfb      	ldrb	r3, [r7, #15]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <memset>:
 80065a4:	4402      	add	r2, r0
 80065a6:	4603      	mov	r3, r0
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d100      	bne.n	80065ae <memset+0xa>
 80065ac:	4770      	bx	lr
 80065ae:	f803 1b01 	strb.w	r1, [r3], #1
 80065b2:	e7f9      	b.n	80065a8 <memset+0x4>

080065b4 <__libc_init_array>:
 80065b4:	b570      	push	{r4, r5, r6, lr}
 80065b6:	4d0d      	ldr	r5, [pc, #52]	@ (80065ec <__libc_init_array+0x38>)
 80065b8:	4c0d      	ldr	r4, [pc, #52]	@ (80065f0 <__libc_init_array+0x3c>)
 80065ba:	1b64      	subs	r4, r4, r5
 80065bc:	10a4      	asrs	r4, r4, #2
 80065be:	2600      	movs	r6, #0
 80065c0:	42a6      	cmp	r6, r4
 80065c2:	d109      	bne.n	80065d8 <__libc_init_array+0x24>
 80065c4:	4d0b      	ldr	r5, [pc, #44]	@ (80065f4 <__libc_init_array+0x40>)
 80065c6:	4c0c      	ldr	r4, [pc, #48]	@ (80065f8 <__libc_init_array+0x44>)
 80065c8:	f000 f818 	bl	80065fc <_init>
 80065cc:	1b64      	subs	r4, r4, r5
 80065ce:	10a4      	asrs	r4, r4, #2
 80065d0:	2600      	movs	r6, #0
 80065d2:	42a6      	cmp	r6, r4
 80065d4:	d105      	bne.n	80065e2 <__libc_init_array+0x2e>
 80065d6:	bd70      	pop	{r4, r5, r6, pc}
 80065d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80065dc:	4798      	blx	r3
 80065de:	3601      	adds	r6, #1
 80065e0:	e7ee      	b.n	80065c0 <__libc_init_array+0xc>
 80065e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80065e6:	4798      	blx	r3
 80065e8:	3601      	adds	r6, #1
 80065ea:	e7f2      	b.n	80065d2 <__libc_init_array+0x1e>
 80065ec:	08006674 	.word	0x08006674
 80065f0:	08006674 	.word	0x08006674
 80065f4:	08006674 	.word	0x08006674
 80065f8:	08006678 	.word	0x08006678

080065fc <_init>:
 80065fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fe:	bf00      	nop
 8006600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006602:	bc08      	pop	{r3}
 8006604:	469e      	mov	lr, r3
 8006606:	4770      	bx	lr

08006608 <_fini>:
 8006608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660a:	bf00      	nop
 800660c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800660e:	bc08      	pop	{r3}
 8006610:	469e      	mov	lr, r3
 8006612:	4770      	bx	lr
